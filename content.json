{"pages":[{"title":"关于我","text":"91年生人，坐标深圳，每日穿梭于城市水泥森林之间艰难谋生。 已过而立之年，依旧碌碌无为，但仍倍感珍惜当前的平静生活。现如今国际局势动荡不安，国内矛盾与日俱增，我也很快将要面对35岁的职场难关。身为大时代裹挟之下的小人物，这社会上的诸多不公，我无力改变，却也不想坦然接受，面对时代的滔天巨浪，我只想为自己的小家求得一份安全与宁静。 也许未来的某一天，我们会收复台湾，房价会趋于合理水平，劳动法能落到实处，人民公仆愿意真心实意地为人民服务；我们的产业升级能够成功，我们能占据几条核心全球产业链的上游，我们的纳税负担能够减轻，我们的人口结构会逐步优化；到后来，不再有资本家的肆意剥削，不再有贪官污吏的暴敛横征，不再有公权力对个人权利的践踏和蔑视，再往后，我们… 时至今日，我依然希望祖国最终能够走上繁荣富强的道路。","link":"/about/index.html"}],"posts":[{"title":"关于Redis Cluster，我所知道的事（一）","text":"因9月30号要在组内做分享，这些天我一直在看Redis Cluster。老实说东西有点多，我一下子也看不完，因此打算先把现阶段看过的东西梳理一下。文章的结构如下： Redis单机环境的安装与基本数据结构介绍 Redis Cluster介绍 Redis Cluster环境搭建 补遗 参考资料主要为Redis的两篇官方文档以及网上搜到的一些零碎的资料。因为是第一次接触这块内容，不敢保证所写内容都是正确的，如本文有误，烦请批评指正。 ## Redis单机环境的安装与基本数据结构介绍 Redis的安装是非常简单的，首先是下载官方的压缩包，解压，cd到对应的目录，然后执行make命令即可。然后我们需要启动redis-server，命令是：src/redis-serverredis有个内置的client，通过它我们可以通过命令行的方式与redis-server进行交互，命令是：src/redis-cli Redis的数据结构主要有以下几种：Strings，Lists，Sets，Hashes，Sorted sets和Bitmaps and HyperLogLogs。关于每种数据结构的介绍以及基本的使用方法可以参考这里：An introduction to Redis data types and abstractions 因为这个比较简单，这里就不再赘述了。 ## Redis Cluster介绍 Redis Cluster，又叫Redis集群，是一种可以令数据在多个Redis节点之间进行传输的设施，通常用作构建分布式缓存。Redis集群的优势主要集中在以下两个方面： 自动分割数据到不同的节点 部分节点宕机或不可达的情况下，能够继续处理命令 需要注意的是，Redis集群并不支持处理多命令，当然这并不是绝对的，后面会对此进行进一步地介绍。 每个节点都需要保持两个TCP端口处于打开状态，其中一个用于与客户端进行交互，另一个用于集群内部节点之间传输信息。这两个连接的端口号的差值默认为10000，例如第一个端口号为6379，则另外一个为16379。第二个端口用于集群链接（cluster bus），这是一种使用一个二进制协议来进行点对点（node-to-node）交互的通道。集群链接用户宕机检测，配置更新，失效备援（failover）认证等等。客户端永远都不需要试图通过集群链接端口进行交互，而应当通过普通的Redis命令端口。 哈希槽（hash slots）哈希槽是redis集群中的一个重要的概念，它其实就是代表这一个keys的集合。redis集群共有16384个哈希槽，每个key通过CRC16校验然后对16384进行取模来决定该key应当被放到哪个槽中。集群中的每个节点负责一部分哈希槽，举例，比如现在集群中存在三个节点，则： 节点 A 包含 0 到 5500号哈希槽 节点 B 包含5501 到 11000 号哈希槽 节点 C 包含11001 到 16384号哈希槽 这种设计使得添加或者删除集群中的节点变得比较简单，比如说我想添加一个节点D，我只需要将A,B,C中的一部分槽移动到D即可；同样地，如果我想移除节点A，则只需要将A所负责的那一部分槽移动到B和C节点，然后将没有任何槽的A节点从集群中删除即可。 需要说明的是，移动哈希槽并不需要停止服务，因此无论是添加、删除还是改变节点所包含的槽占总槽数的百分比，都是不需要停机的。 哈希标签（hash tags）redis集群并不是在任何情况下都不支持执行多命令的。事实上如果我们希望做到这点，则首先需要引入一个哈希标签（hash tags）的概念，这个东西简单来说就是用大括号{}包裹起来的一个key的子串，比如说this{foo}key和another{foo}key，其中的{foo}就是一个哈希标签，因为这两个key拥有相同的哈希标签{foo}，因此可以保证他们会被放到相同的哈希槽中，从而使得它们可以被用于多命令执行中。 这里插一句，之所以this{foo}key和another{foo}key会被放到同一个哈希槽中，是因为只有其中的{foo}会被哈希，因此它们的哈希值是相同的。另外需要说明的是，哈希标签中的大括号是不支持嵌套的，也就是说，redis集群只会将一个key中的第一次出现的{和第一次出现的}之间的内容进行哈希，而不会去管key中存在多少个大括号。另外，如果大括号之间没有字符，则对整个key进行哈希，这种将{}放到key中的做法通常用来保证整个key会被哈希。 主从模型（master-slave model）这个非常好理解，我们假设我们的集群中存在三个master和三个slave，且master和slave一一对应，设为A,B,C和A1,B1,C1，则当B宕机时，集群便会推举B1成为新的master，使得整个集群得以继续正常运转。当然，当B和B1都处于宕机状态时，整个集群便可不用了。 当然，每个master可以拥有多个slave，slave越多，集群的健壮性也就越大。另外，redis集群还拥有复制迁移（replicas migration）的特性，这个特性简单来说就是说，假设集群当前的slave节点数要稍稍多于master数，则当某个只拥有一个slave的master的slave宕机时，该特性可以保证一个slave会被迁移到这个master上，从而尽可能地保证了整个集群的可用性。 一致性保证（consistency guarantees）redis集群并不能保证数据的强一致性（strong consistency），因此在一些特定的情况下，集群可能会丢失写操作。具体来说，由于集群采用的是异步备份（asynchronous replication），因此在一个写操作中，实际上发生了一下几个步骤： 客户端向节点B写数据 B节点返回OK给客户端 B节点将写操作的结果传播（propagates）给它的suoyouslave节点 我们可以看到B节点并没有在返回结果给客户端之前，等待它的slave节点对该操作结果进行确认。因此，假设B节点确认了客户端发过来的写操作，但是却在发给它的slave之前宕机了，它的其中一个slave将会被推举为一个新的master，使得这一写操作永远丢失。 这听上去不够好，然而如果要等master节点的每一个slave都确实收到了写操作的结果之后再发OK给客户端的话，这显然会带来严重的性能问题。因此这事实上是一种对性能和一致性的一种权衡。 为了尽可能地缓解这一问题，redis集群通过wait命令实现同步写操作，这多少让写操作丢失出现的可能性降低了一点。 还有一种可能导致写操作丢失的情况是集群出现了网络分区（network partition）即客户端和至少一个master节点被孤立于其他的多数节点。举个例子：假设集群包含 A 、 B 、 C 、 A1 、 B1 、 C1 六个节点， 其中 A 、B 、C 为主节点， A1 、B1 、C1 为A，B，C的从节点， 还有一个客户端 Z1。当发生网络分区之后，假设集群被分为两块，一块是A 、C 、A1 、B1 和 C1，另一块是B和Z1，则当分区的时间足够长时，B1将被推举为新的master，则Z1向B写入的数据将永久丢失。因为在等待一个制定时长的超时时间之后，（下面会提到的）当一个slave节点被推举为新的master节点时，处于少数分区中的master节点将停止接收写操作。 Redis-cluster 架构图 注意，在网络分区期间，Z1向B发送写命令的最大时间是有限制的，这一限制被称为节点超时。（node timeout）节点超时的意思是说，当多数分区中的node已经推选出了新的master时，在少数分区中的master节点将停止接收写操作。节点超时还有一个作用就是当某个master节点处于宕机或不可达的状态时，等过了这个超时时间之后，这个master节点中的某个slave节点将作为新的master节点，来替换掉它。 CLUSTER NODES命令CLUSTER NODES命令可用于监察集群中各个节点的相关信息，其信息格式为： 1&lt;id&gt; &lt;ip:port&gt; &lt;flags&gt; &lt;master&gt; &lt;ping-sent&gt; &lt;pong-recv&gt; &lt;config-epoch&gt; &lt;link-state&gt; &lt;slot&gt; &lt;slot&gt; ... &lt;slot&gt; 下面分别来介绍每个参数的含义： 节点ID，由40个随机生成的字符组成，并唯一地标识这个节点。每个节点都会记住其他节点的ID，即它们彼此之间是通过ID来进行辨识的，而不是通过IP和端口号。这也就是说，哪怕某个节点的IP和端口号发生了变化，其他节点也能够找到这个节点。 IP和端口号 标识（flags） 如master, slave, myself, fail, … 如果该节点为slave，则显示其master的节点ID，否则显示为’-‘ 集群最近一次向节点发送 PING 命令之后， 过去了多长时间还没接到回复 节点最近一次收到 PONG 回复的时间 节点的配置纪元（Configuration epoch）即当前节点（若当前节点为slave，则为其master节点）的配置纪元。每遇到一次失效备援，一个新的，唯一的，单调性的配置纪元就会被创建。它主要用于当多个节点声称负责同一组哈希槽时，配置纪元高的节点将最终负责这一组哈希槽。（配置纪元其形式就是一个非负的数字） 点对点链接的状态信息，可为connected或disconnected 该节点所负责的哈希槽的范围 添加、删除、复制迁移、升级节点添加一个master节点 首先我们要做的，就是添加一个新的空节点。（具体做法请参照下一节）当节点可以正常启动之后，我们通过redis-trib来添加这个节点到现有的集群中，其命令格式为： 1./redis-trib.rb add-node 新节点IP和端口号 随便一个已经在集群中的节点的IP和端口号 在这里redis-trib所做的工作其实并不多，它主要就是发送了一个CLUSTER MEET命令，这个命令的作用是让两个节点相互认识，从而将新的节点加入到集群中。 不过此时新节点中还没有包含任何数据，因为它没有被分配哈希槽。分配给新节点一些哈希槽，其实也就是分片（reshard）的过程，其命令格式为：./redis-trib.rb reshard 随便一个已经在集群中的节点的IP和端口号。我们只需要指定集群中某一个节点的IP和端口号，redis-trib就能够自动寻找到集群中的其他节点。接下来，我们只需要按照命令行中的提示进行操作即可。具体的下一节有述。 添加一个slave节点 添加一个slave节点的命令是： 1./redis-trib.rb add-node --slave 新节点IP和端口号 随便一个已经在集群中的节点的IP和端口号 注意：这里并没有指明说我们要把这个slave节点分配到哪一个master节点，事实上，系统会自动挑选一个master节点，然后将这个slave节点分配给它。当然你也可以指定要分配给的master节点，命令为： 1./redis-trib.rb add-node --slave --master-id master节点ID 新节点IP和端口号 随便一个已经在集群中的节点的IP和端口号 还有一种做法，就是使用CLUSTER REPLICATE 命令。具体做法是，首先我们要访问到这个新的节点，然后执行命令： 1cluster replicate master节点ID 移除一个节点 如果我们希望移除一个slave节点，只需要执行如下命令： 1./redis-trib del-node 随便一个已经在集群中的节点的IP和端口号 `希望删除的节点ID` 如果希望移除一个master节点会稍微复杂一些，首先我们要将该节点负责的哈希槽清空，即将它们迁移到其他节点，然后再行移除。还有一种做法就是通过人工的方式(CLUSTER FAILOVER)来制造失效备援，这样当这个master节点的slave节点被推举为新的master节点时，这个旧的master节点就可以被移除了。当然，这么做并不会在实际上减少master节点的数量。 复制迁移 命令格式为： 1CLUSTER REPLICATE master节点ID 这个命令的作用其实就是切换一个slave节点的master节点。这个命令的优势在于，当我们配置的slave节点数比master数稍多时，当某个master节点的唯一的slave节点宕机了，通过该命令可以将一个多的slave节点分配给该节点，从而提高了整个集群的稳定性。 升级节点 升级一个slave节点是比较简单的，我们只需要将其停机，升级redis版本，然后再重启即可。然而升级一个master节点会稍显复杂，其思路主要就是通过人工出发失效备援，导致master节点和slave节点进行角色互换，升级完成之后再出发一次新的人工失效备援即可。 Redis Cluster环境搭建搭建一个redis集群环境主要有两种方法：一种是人工操作的方法，另一种时通过执行create-cluster脚本的方法，下面我将分别介绍这两种方法。注：构建一个集群需要的节点数最少为三个master节点。 人工搭建 方便起见，我们建立三个master节点和三个slave节点。需要执行的操作具体如下： mkdir cluster-testcd cluster-testmkdir 7000 7001 7002 7003 7004 7005 给每个目录（7000到7005）分别创建redis.conf。redis.conf的基本格式如下： port 7000cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000appendonly yes 配置解释： cluster-config-file指定了redis集群的配置文件所在路径，不过该文件不需要我们人工进行修改，它会在集群简历之后自动创建并自动更新。 appendonly，即Append-only file，是redis的一种实现持久化的方式。将其设为yes之后，任何对redis数据集的修改都会被记录到这个AOF文件中，以便在redis可能遇到故障需要重启时通过载入该文件来恢复到重启前的状态） 注意每个redis.conf中的port都应该与自己对应的port相同。然后拷贝redis-server到cluster-test目录中，然后在终端打开6个tab，每个tab都分别cd到对应的目录中（如7000），然后执行命令： ../redis-server ./redis.conf 这样每个空的节点就都启动起来了。之后我们要做的就是将这些运行中的redis实例构建为一个集群，具体做法是执行如下命令： ./redis-trib.rb create –replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 如果你不做一些事先准备的话，上述命令应该是没法运行的。为了能够成功通过redis-trib.rb执行命令，你首先需要安装ruby。以ubuntu为例，命令是： 12sudo apt-get install ruby-fullsudo gem install redis 另外，如果你要在多台机子上构建redis集群，那么上述的create命令中，节点的ip地址就不可以使用本地地址，而要使用每台机子的真实IP地址，如： ./redis-trib.rb create –replicas 1 192.168.31.243:7000 192.168.31.153:7003 192.168.31.243:7001 192.168.31.153:7004 192.168.31.243:7002 192.168.31.153:7005 注意这里的**–replicas 1**的意思是说为每个master节点分配一个slave节点。那么如果一切顺利的话，我们会在终端上看到如下所示的信息： [OK] All 16384 slots covered 由上图我们可以看到，master节点对应的端口号为：7001，7000，7003，其余的为slave节点，正好是三对三。 create-cluster脚本搭建 显而易见通过这种方式来构建redis集群真的是太麻烦了，那么简单的方法就是通过这个create-cluster脚本来搭建。create-cluster脚本放在redis目录中的utils/create-cluster目录中。为了启动三个master节点和三个slave节点，我们只需要执行如下几条命令： create-cluster startcreate-cluster create 然后我们再执行上述的redis-trib命令即可。注意，通过这种方式默认创建的第一个节点的端口号为30001。 如果要让整个集群停止运作，只需要执行： create-cluster stop 你可能会问，如果我想要创建更多的master和slave节点要怎么办？很简单，修改create-cluster脚本即可。 补遗 集群中的节点并不具有代理功能，即如果收到的命令不属于自己需要处理的范围，该节点并不会将这个命令自动转发给正确的节点，而是会返回给客户端一个MOVED类型的错误。客户端需要能够处理这种错误，并将命令再次发给正确的节点，其实最好能将哈希槽和节点的对应关系缓存起来，这样执行命令的效率才会更高。 集群中的节点还具有记录key和value映射关系，集群状态，key到正确节点的映射关系，以及自动发现其他节点，识别工作不正常节点的功能。 节点之间使用Gossip 协议 来进行以下工作： 传播（propagate）关于集群的信息，以此来发现新的节点。 向其他节点发送 PING 数据包，以此来检查目标节点是否正常运作。（如正常会返回PONG） 在特定事件发生时，发送集群信息。 一个节点可以改变它的IP和端口号，集群可以通过节点ID自动识别出其IP/端口号的变化， 并将这一信息通过Gossip协议广播给其他节点知道。","link":"/2015/09/28/2015-09-28-redis-cluster-1/"},{"title":"那些令我印象深刻的搖滾專輯（一）","text":"人有時候，會突然因為某個很偶然的契機，而想去做某件事情。就比如說，偶然聽到某一首你很熟悉的歌，你可能就會突然感覺很懷念，然後把對應的那張專輯找出來再聽一遍。又比如說，你在網上看到某人的評論文章中提到了某一部電影，而這部電影你正好以前看過，而且你知道它是一部好片子，你可能就會突然很想再看一邊。這樣的感受應當會很普遍的吧，我想我就不用再舉例子了，大家應該都明白的。 我也是這樣，在某一個很普通的夜晚，我也遇到了這樣的一個契機。不過我可能想的更遠了一些，因為我忽然覺得，我很幸運，或者說，我們每一個人都很幸運。因為我們每一個人，尤其是處在當今這個信息大爆炸年代的我們，不知道看過，聽過，感受過多少優秀的作品。這些作品可以是音樂，電影，電視劇，小說，畫作，戲劇，雕塑等等一系列的泛藝術化作品，很難講它們能夠在多大程度上地影響我們的人生，但是它們一定極大地豐富了我們的精神世界，內化為我們每個人的品格，內涵，素養或價值觀。 所以說我們是如此的幸運，一方面是我們得以欣賞這些優秀的作品本身，另一方面，我們也或多或少地從這些作品當中，汲取了一部分內化到我們的心靈當中，換言之，沒有它們，或許就不能造就今天的我們。 所以我們也同樣應當懂得感恩，感謝那些偉大的作者們，為我們貢獻出了這麼多部優秀的作品。 有時候我會覺得人的記憶真的很奇妙，有些幾天前才發生過的事情，你可能今天就想不起來了，但是有些事情，可能發生在三年前，五年前，十年前，甚至是更為久遠的歲月，但是你依然忘不掉，或者說雖然有很多細節上的東西你記不太清楚了，但是當時帶給你的或震撼，或感動，你一定不會忘記。你還記得你當時的心情，它是如此地令你印象深刻，所以那一定是很重要的事情，所以你不會忘記，並且它們或許會伴隨著你走完這一生。 不出意外的話，我的人生應該也還剩下很漫長的一段時光。不知道等到我處於彌留之際的時候，我還有沒有空餘的心思，去回顧那些我欣賞過的優秀的作品，回憶起它們當時所帶給我的那些感動，不知道我還有沒有精力，將它們一一列舉出來，然後在心中默默地對它們說一句：「謝謝」。不過，或許也不用非得等到那個時候吧，現在去做一個簡單的回顧，不也是一個蠻恰當的時機麼。 不過當我真正開始思考我究竟得以遇見多少優秀作品的時候，我才發現問題並沒有那麼簡單。不是因為我已經想不起來了，而是發現真的太多了，我沒有辦法一下子全部窮盡。而且維度很多，不知道從何開始下筆。不過在那個普通的夜晚，當一首我很熟悉的歌曲從播放器中響起的時候，我已經知道了答案，就，先從搖滾開始談起吧。 Simple Plan（後簡稱SP），作為一隻99年成立，來自加拿大蒙特利爾的流朋樂隊，現如今已經具有了全球範圍內的影響力，其在中國的歌迷也不在少數，樂隊成員更是來過中國舉辦過演唱會，其魅力可見一斑。時至今日，我依然非常喜愛他們的歌曲，並且我對他們每一張正式專輯的歌曲旋律依舊是印象深刻，我甚至敢打包票說，隨便抽一段五秒時長的片段，我也能馬上回憶起歌曲名，所在專輯名，甚至還包括曲目序號。 文中圖片取自他們第二張專輯的封面，也是我最喜歡的他們的一張專輯。客觀來說，這張專輯或許不是他們最棒的一張，（事實上也很難決定到底哪一張專輯最為出色，我並不想引起歌迷之間的戰爭）但毫無疑問是我印象最為深刻的一張。其實從現在的眼光來看，這張專輯是一張傳統到不能再傳統，猶如流朋教科書一般的搖滾專輯。傳統的三大件，簡單的歌詞和和聲，固定的旋律編排與和絃走向或許會令一眾搖滾大佬們聽到直打哈欠，然而它對我的意義在於，他是我聽過的真正意義上的第一張搖滾專輯。我現在依然記得05年的時候，（難以想象距今已經11年了）初中時候的X同學第一次放給我聽時，我那時的震撼。在那之前，我其實並不是很喜歡聽歌，聽過的也不是很多，且主要都是一些古典歌曲。然而抓耳的旋律，清亮的嗓音卻一下子就深深地吸引了我，讓我明白了原來還有這樣的音樂，簡單，直接，卻有著直衝心靈的強大力量。從那天起，一發不可收拾，直到今天。搖滾伴隨我已經走過了11個念頭，而這張專輯正是一切的起點。多少個夜晚，我一遍遍地背誦著歌詞，跟著MV手舞足蹈，五音不全地唱著，想象著自己就跟Pierre一樣站在舞臺中央，唱著自己最喜歡的歌曲。多少次走在路上，一邊聽著耳機中的音樂，一邊跟著旋律輕輕地哼唱著。我想，這張專輯之所以對我來說彌足珍貴，正是因為它所承載著的，是我那蒼白無力的青春生涯當中，猶如星星點點般的卻又無比珍貴的回憶。作為一切故事的開始，時至今日，這張專輯依舊是我最為熟悉的一張，曲目名稱，順序，旋律等等，猶如深深地刻在我的腦海中一般，難以忘卻。雖然我現在已經很少再重溫這張專輯了，不過偶爾想起的旋律，卻在不斷地告訴著我，什麼是我最初的震撼，最初的感動又是什麼。 我其實一直不太清楚一個問題，就是專輯一直維持著某一個水準穩步上升，或者偶爾出一兩張專輯大賣之後，再迅速回歸平凡，這兩種情況對於一個流行搖滾樂隊和他的樂迷來說，哪一種更容易被接受。答案可能千差萬別，作為樂隊和歌迷來說可能也會有著不同的答案。不過我猜Green Day中的三人，或許也曾經糾結過這個問題。 Green Day（後面簡稱GD），就其影響力來看，毫無疑問是世界級的流行搖滾樂隊，在中國不乏歌迷這個自然也不必說。然而他們當然不是一開始就能取得像今天這樣的地位的。作為90年代朋克復興的代表性樂隊之一，GD成立之初的表現乏善可陳。然而自1994年的專輯《Dookie》一炮走紅之後，GD得以迅速走入大眾的視野，成為知名的流行搖滾樂隊之一。但是在那之後，十年的時間之內，至少在我看來，GD的表現依舊是極為平庸的。的確在這十年當中，GD的歌迷數量在不斷地擴大，影響力也在逐步提升，但是他們卻始終無法擺脫《Dookie》的陰影。 這十年時間他們不是沒能再度創作一些膾炙人口的歌曲，然而大家彷彿都跟瞎了一樣，對這三人的努力視而不見，而只惦記著他們昔日的輝煌。在一次專訪中，主唱Billie Joe自己也承認，人們一提到GD，就會聯想到《Dookie》，就會提及《Longview》，《Basket Case》等等這些專輯中的經典曲目，而他們也不得不在無數個大大小小的演唱會中，一遍一遍不厭其煩地彈奏著這些歌曲。彷彿沒了《Dookie》，GD就什麼也不是了，這無疑令他們感到十分的失望與不甘心。 等到了2004年，一切終於有了轉機，那就是《American Idiot》的問世，再一次轟動了全球，而且其巨大的影響力，遠勝於1994年的《Dookie》。GD三人終於成功地擺脫了過去的陰影，迎來了一個新的巔峰和高潮。文中上圖正是他們的這張知名專輯：《美國白癡》的專輯封面。而這張專輯，也正是我最喜歡的GD專輯。 提到這張專輯，就不得不提及一個小插曲。在他們籌備新專輯的時候，有一天錄音室失竊，竊賊偷走了當時GD所有新歌曲的demo和小樣。樂隊三人痛定思痛，最終作出了一個重大的決定，也就是重新開始錄製這張製作中的新專輯，而這也正是《American Idiot》誕生的伊始。從某種意義上來說，正是因為有了這個竊賊，樂隊三人才真正地能夠重新思考新專輯的創作，拋棄舊有的創作思路，去開拓一片新的天地。可以說，沒有這個小插曲，就不會有《American Idiot》的誕生，也更不會令GD迎來他們搖滾生涯中的第二次輝煌。這樣說來，大破而後大立，也不是沒有道理的。 關於專輯本身，其實並沒有太多好說的。整體水準非常的高，而且一氣呵成，連貫流暢，讓人直呼過癮。我個人的一個小記錄是單曲循環專輯第十三首歌：《Whatsername》循環了一個下午。而知名歌曲《Boulevard Of Broken Dreams》以及《Wake Me Up When September Ends》更是不知道聽了多少次，唱了多少次。曾經試著站在舞臺上演唱過，而更多的則是一個人在家裡靜靜地哼唱著。這兩首歌是如此的出名，相信很多沒有接觸過搖滾的朋友也或多或少聽過一些，旋律響起之時，臉上或許也會掛著一抹似有似無的微笑。 《American Idiot》的巨大成功，令樂隊的聲望提高到了至今難以逾越的地步。然而這卻又是新一輪循環的開始。人們似乎已經淡忘了《Dookie》，但是卻只是將目光重新指向了新的目標而已。依然是在無數個場合中，一遍遍地彈奏這專輯中的曲目。歷史的車輪繞了一個大圈，最終還是回到了原點，除了收入比以前多了不少之外，一切似乎並沒有得到根本性的改變。 接下來09年的新專輯《21st Century Breakdown》，給我的感覺是似乎樂隊很想重回04年的巔峰時期，然而卻有些力不從心。專輯依舊用心，依舊大賣，但是自始至終也沒能複製當年的成功。樂隊模擬04年《American Idiot》搖滾歌劇的成功模式，在新專輯中又玩了一次這樣的把戲，只可惜成效不彰，令人遺憾。很多人說《21 Guns》的水平之高要超過04年的《Wake Me Up When September Ends》，我必須要承認，我完全不這麼認為。記得看過一片報道，說樂隊三人為了新專輯的創作，在靈感枯竭的時候甚至將吉他，貝司等樂器使勁地往牆上砸，來發洩自己心中的煩悶。可想而知，他們為了要複製五年前的成功，心中的壓力是多麼地巨大。 然而毫無疑問的是，一兩次的巔峰或許可以容易做到，一直做到則有些異想天開。之後樂隊在2012年一口氣推出三張專輯，曲風類似早期風格，相信是一種回歸吧。我沒能聽完，因為真的感覺很平庸。不過我像這或許纔是最適合他們的方式。他們已經累了，是時候休息一下了。偶爾玩玩一些簡單的小東西，或許也不是壞事。他們畢竟不是天才，不可能時時刻刻都保持巔峰狀態。作為歌迷，我們只能默默地期待，期待他們的再次爆發吧。 聽Good Charlotte（後簡稱GC）的日子其實跟聽SP的時間相差無幾，因此也是我最早知道的搖滾樂隊之一。96年成立，成軍於美國東海岸馬里蘭州，樂隊的核心是兩兄弟Benji與Joel。其實這兩兄弟的經歷還蠻勵志的，因為他們出身於一個中低收入家庭。可以想象他們一路走來能有今天這樣的成就是多麼的不容易。曾幾何時，GC和SP是可以比肩的流朋樂隊，（我不太清楚現在還是不是，已經很久沒有關注他們了）而早期的GC也確實向世人充分展示了他們的才華。他們的首張同名專輯雖然因為一些因素導致沒能取得較好的成績，（其實質量還是很不錯的）不過後來的《The Young and The Hopeless》以及《The Chronicles Of Life And Death》則是真正讓他們進入大眾視野，並開始大紅大紫的關鍵之所在。 上圖展示的就是他們的第三章錄音室專輯，《The Chronicles Of Life And Death》的專輯封面。這張專輯之所以對我意義非凡，一方面跟專輯本身的質素較高有關，而更重要的，則是它是我第一次購買的專輯之一。（另外一張專輯是Snow Patrol的《Final Straw》，老實說除了其中的那首Run，我已經記不得專輯中的其他曲目了，總之是一張很平庸的作品）當時我還在上初中，老爸第一次帶著年幼的我去到香港遊玩。我那時也不知道去了香港能幹什麼，但是因為喜歡搖滾就去了一家音像店，然後經過一番挑選，購買了這兩張專輯。我還記得這兩張專輯的價格，GC的是150港幣，SP的則是99港幣。別忘了那可是將近十年前的事情，當時的港幣是比人民幣要貴的，可想而知這兩張專輯對於當時的我來說是多麼的昂貴。然而當我真正開始聽GC的這張專輯之後，我發現我買的很值，這是一張水準很高的專輯，其水平並不低於他們的前一張錄音室專輯。（話說我當時之所以不買第二張，是因為我之前已經聽過了）這張專輯我不知道聽了多少遍，當時也在班級上分享給了很多人聽。其中的經典曲目《The World Is Black》以及《We Believe》，我直到今日依然能夠背出其中的大部分歌詞。《We Believe》的MV尤其令我印象深刻，一方面是因為歌曲出彩，剪輯和拍攝用心，另一方面則是因為當時我聽人說裡面有六四事件的一個畫面。 回到這張專輯身上，其實有一個地方很值得吐槽，不過不是樂隊本身的問題，而是發行商的問題。發行商在發行這張專輯的時候，很雞賊地搞出來兩個版本，即所謂的「生」版和「死」版。那這兩個版本有什麼區別呢？主要就兩個地方，一個是專輯封面，「生」版的要比「死」版的看上去顏色鮮亮一些；另一個則是最後一首歌（隱藏歌曲除外）不同，「生」版中那首歌叫《Falling Away》，「死」版中則叫《Meet My Maker》。其實這兩首歌也沒什麼大不了的，也不是專輯中最出彩的歌曲，我搞不明白發行商為什麼要作出這種噁心人的舉動。順便一提，我買的是「死」版。 GC對我來說主要存在著兩大問題，一個是專輯質量自他們的第三張專輯之後開始下滑，另一個則是他們的歌詞過於簡單直白。或許音樂流暢順耳，不過一讀歌詞瞬間就感覺特別的沒有意思。這一點在他們的第四張專輯《Good Morning Revival》中的那首《All Black》中體現的特別明顯，裡面大段大段地重複說著我的什麼什麼是全黑的，真是日了哈士奇了。 GC大概也是考慮過偶爾換個曲風什麼的，比如說玩玩Rap啥的，這點在他們的《I Just Wanna Live》以及《Keep Your Hands Off My Girl》這兩首歌中有所體現。不過總體給人的感覺是四不像，這也是他們備受批評的地方。不是不允許你們玩Rap，而是如果要玩，麻煩請專業點。當然，排除這一點來說，我覺得這兩首歌還是挺不錯的。 自那之後我對GC的關注度就下降了許多，對我來說他們的巔峰時期就是停留在04年的《The Chronicles Of Life And Death》上，之後就開始不斷地在走下坡路。他們的第四張專輯我雖然買了，但是老實說我並不太滿意，而他們的第五張專輯……我連聽完都沒能做到。額，這麼說吧，如果說我對第四張專輯的評價是：「That‘s shit.」，那麼我對第五張專輯的評價就只能是：「That’s Bullshit.」 從任何意義上來講，Yellow Card（後簡稱YC）都是一隻非常出色的流朋樂隊。YC其實成軍較早，於97年成立。我對他們早期的作品不是非常熟悉，也不太關心。聽過他們的最早的一張專輯是04年發行的《Ocean Avenue》，另外也是從這張專輯開始，之後的錄音室專輯我都有所涉獵，包括於14年推出的最新專輯《Lift A Sail》。我聽YC也是蠻早的了，沒記錯的話是初中那會兒，跟SP，GD同一時期聽的。 如果要我來說YC相比於其他的搖滾樂隊最大的不同，那就是樂隊成員中有一位小提琴手了。每增加一種樂器，都會使得編曲增加新的維度，當然，複雜度也會隨之提升。不得不說YC的很多歌曲相比其他流朋樂隊並沒有太多的不同，大部分情況下小提琴的聲音都不會很突出，有時甚至可能都不會出現在歌曲中。然而一旦有了突出表現，尤其是獨奏的時候，都會給人一種眼前一亮的感覺，這一點在專輯《Ocean Avenue》中的曲目《Empty Apartment》和《Only One》，以及專輯《Southern Air》中的曲目《Always Summer》等作品中都有著諸多酣暢淋漓的表現。客觀來說旋律上並沒有什麼特別出彩的地方，但是其中的小提琴點睛solo一定會讓你印象深刻，尤其是在大多數流朋音樂無法擺脫傳統三大件的桎梏導致曲風無比雷同的情況之下。 這裡貼出的專輯封面來自他們於12年推出的專輯《Southern Air》，同樣地，這張專輯未必是YC最棒的專輯，然而卻是我最為欣賞的一張專輯。其實這涉及到我對聽歌的一種個人偏好，就是對於我來說，專輯這個概念非常的重要，因為它代表了一種情緒上的完整性。也就是說我聽歌一般都是會完整地去聽一整張專輯，而不會說從很多地方抽取出一些好聽的歌曲，湊成一個歌單或者諸如此類的東西。也正是因為如此，我一直對很多音樂軟件中強調歌單這個概念感到不以為然，因為在我看來，專輯是一個整體，是不應該被撕裂開來的。大部分專輯都是歌手或樂隊在一個連續的時間段中的勞動結晶，因此在聽感上會給人一種完整性。的確，很難做到說專輯中的所有歌曲都是我們所喜歡的，我們往往只對其中的若干首歌曲印象深刻，然而這兩者在我看來是不衝突的。前面提到專輯的創作一般是在一個連續的時間段中，創作者會在這段時間之內通過歌曲去表達某一種或某些但是一定會是連續著的情緒。是的，其實問題的關鍵就在於情緒這個詞上，因為任何一張專輯的曲目順序一般都是會經過精心地編排的，也就是在這種特定的曲目順序之下，能夠最佳地向聽者展現創作者當時的情緒和感情。就好像情緒有高昂也有低落一樣，歌曲也應當是如此，（或許也可以對應到專輯中所謂的好聽或一般的歌曲這個問題上）因為它是基於情緒的。情緒有起伏，但一定會是連續的，那麼在特定的曲目順序下，聽者能夠獲得的情緒體驗也一定會是連續的。 那麼如果我們人為地將其拆散開來，單純地將很多自己喜歡的歌曲湊在一起，因為感受到的情緒是支離破碎的，那麼這就會令我們在感受歌曲所帶給我們的情緒中，會感到有些茫然，不知所措。就比如說你同時喜歡聽輕音樂和死亡金屬，把這兩種風格的歌曲各挑一首放在一起聽，雖然都是你喜歡聽的，但是我相信你多少會感到有些奇怪。或者我們不要舉這麼極端的例子，哪怕歌曲風格類似，如果兩首歌一首是男聲一首是女聲，或者歌手的演唱風格差別較大，帶給我們的聽感體驗也一定不會是連續的，這也就是我這麼強調專輯這個概念的原因之所在。因為情緒是連續的，更不用說曲風和演唱風格了。 當然，我不否認有製作非常精良的歌單，挑選的歌曲風格相近，情緒也相近，同樣也能給人類似專輯一般的享受。當然，我也承認有些專輯並不會給人一種連續的感覺，尤其是那種創作時間跨度很久的專輯。另外，我也不是在任何時候都會完整地去聽一張專輯，也會挑其中幾首歌聽聽看，（但是一定是將同一專輯中挑選出來的幾首歌一起聽完，而不會在其中摻雜來自其他專輯的曲目）然而我一般都會意識到我當前聽的歌曲屬於專輯中的第幾首歌，以及它的前一首和下一首歌曲的旋律是怎樣的，以保證情緒的連續性。 回到《Southern Air》這張專輯上來。我之所以如此推崇這張專輯，一方面是因為它足夠優秀，另一方面則是因為它給我的整體感非常強烈，整張專輯渾然一體，彷彿不可分離似的。在這張專輯中同樣存在主打歌曲，但是因為其他歌曲的質素也不會差太多，因此加強了整張專輯的情緒連續性，因此對於我來說，可以算是真正意義上的一種聽覺盛宴。 我覺得一張出色的專輯，是可以讓你不會注意到歌曲已經從上一首切換到了下一首，或者雖然當前播放的這首歌的曲調於前一首歌有較大的不同，但是會讓你覺得就該如此，情緒就應當在此時有所起伏。我相信能做到這一點的專輯，一般都不會太差。像《Southern Air》這張專輯，在聽的時候我甚至有時候會有一種錯覺，就是比如說專輯時長50分鐘，我會覺得說大概只過了25分鐘。這種時間縮短效應也是專輯優秀的一種體現，因為在聽的過程中，歌曲與歌曲之間的界限你無法分得很清楚，導致你會對專輯的時長估計錯誤，因為你不知道什麼時候切歌了。 這次沒有講太多跟YC以及這張專輯有關的話題，因為除了說它們很優秀，值得一聽以外，我並不覺得還有什麼需要補充的。它們很棒，僅此而已，但我想這也足夠成為靜下心來去欣賞的理由了吧。 在這裡再稍微談一下我對新專輯《Lift A Sail》的看法吧。這張專輯我聽的次數很少，主要原因在於不夠吸引人。抓耳的小提琴獨奏幾乎沒有了，而且整體給我的感覺就好像是對原始的歌曲進行了一番濃妝豔抹。或許樂隊想在風格上作出一些創新也說不定，雖然我不是很認可就是了。總之整體來說比較平庸，要我推薦的話我更推薦之前的幾張專輯，也就是前面提到的《Southern Air》，以及07年出的《Paper Walls》和11年出的《When You’re Through Thinking, Say Yes》。 整個音樂界，或者至少是搖滾界，應該總是不缺那種靠一兩張專輯成功進入大眾視野，從而奠定其在搖滾音樂史上地位的樂隊。像前面提到的ＧＤ就是其中的典型，而這次要談的My Chemical Romance（後簡稱ＭＣＲ）也不例外。很多時候我都會對這種樂隊抱有一種心情很複雜的態度，你當然不能否認這些樂隊是非常優秀的，但是你就是聽不進去他們的其他專輯，我是指除去奠定他們地位的專輯以外的其他專輯。喜歡一張專輯，你自然會去關注創作者是誰以及他或他們的其他作品是什麼樣的，但是這樣的樂隊可能就會讓你感到失望，聽上一兩首他們早期的歌曲，發現不是你的菜，你可能就會拒絕嘗試去聽他們其他歌曲了。 說到ＭＣＲ，我當年就是靠他們這張大賣的專輯《The Black Parade》才認識他們的。我還記得我上初中的時候，買過幾本音樂雜誌。雜誌名字沒有記錯的話應該是叫《ＨＩＴ 輕音樂》，雖然裡面談論搖滾樂比較多。當中就對ＭＣＲ的這張專輯讚不絕口，不僅用大篇幅去介紹專輯和樂隊，而且連續好幾期都在專輯推薦中能夠看到這張專輯。在一個搖滾不算是主流音樂的國度的音樂雜誌上，這張專輯都能夠享受到如此的待遇，可想而知在其他國家會火成什麼樣子。 專輯本身的質素不需要多說，我已經數不清我聽了多少遍了，也是屬於那種隨便抽一段我都知道是那首歌，第幾首這樣的地步。我記得還是初中的時候，我加過一個搖滾同好者群，其中有一個跟我年紀差不多的妹子特別喜歡這張專輯，甚至為專輯中的每首歌都配了一大段文字來描述自己的感受和想法，看得出來真的是真愛。我也記得在初中放學回家的路上，我跟前面提到的Ｘ同學，兩個人跟傻逼一樣唱著專輯中的歌曲。。。現在想來，這才真的是我逝去的青春啊。 《The Black Parade》這張專輯是０６年發佈的，而ＭＣＲ的下一張專輯則是到了１０年才發佈。在此期間樂隊在全球各地巡演，專輯中的曲目想必也是演奏了無數遍。我不清楚ＭＣＲ有沒有來過中國大陸，不過是有在香港舉辦過演唱會的，然而我並沒有去過。在《The Black Parade》中，主唱Gerard的高音飆得很高，不過在網上我見到了不少吐槽Gerard高音上不去的帖子，在這個世界上現場表現遠遠比不上專輯中的水準的樂隊也是數不勝數的，還有就是Gerard變胖了，原來拍ＭＶ（《Welcome To The Black Parade》，專輯第五首歌）中穿的衣服穿不進去之類的，我對這些花邊新聞不太關注，不過這至少說明ＭＣＲ在推出這樣一張重量級專輯之後，小日子過得很舒服。我記得他們有一場演唱會的主題，貌似也是在１０年新專輯推出之前，最後的一場演唱會的主題叫做：「The Black Parade Is Dead」，我不清楚為什麼要將此作為這次演唱會的主題，不過我自己腦補認為，估計樂隊成員也嫌煩了吧，就像我在評論ＧＤ的時候所講的那樣，樂隊推出一張前所未有的重量級專輯，是成功也是陰影。它會令歌迷們忽略樂隊之前作品的出彩之處，也會對他們下一張專輯的期待達到更高的高峰，這對樂隊來說是一種壓力，更是一種變相的歧視，就好像樂隊此前推出的專輯都一無是處似的。 因為ＭＣＲ的空前成功，一個名詞也迅速地進入到了大眾的視野當中，那就是ＥＭＯ，中國這邊應該是將其翻譯成情緒搖滾吧。ＥＭＯ算是一種小眾的搖滾風格，你要是說它並不小眾可能會被一眾ＥＭＯ死忠暴打。而ＭＣＲ在成軍初期正是一隻ＥＭＯ風格的樂隊。說來這個世界真的蠻有意思的，就是幾乎人人都很強調逼格，怎麼樣才會有逼格呢？喜歡的東西比較小眾就是其中之一。人們自覺或不自覺地形成一個個的小團體，然後彼此之間都認為對方都是傻逼，這或許也是人類的一種獨特的鄙視文化吧。 本來一小群人喜歡某樣事物，讓他們自娛自樂也沒什麼不好，然而當因為某個契機導致這個事物步入大眾視野，也就是有更多的人開始談論它的時候，之前的這一小群人就會覺得不爽，覺得受到了冒犯，因為他們會不自覺地認為大眾是無知的，畢竟圖樣，自己比他們不知道高到哪裡去了，覺得他們還需要學習一個什麼的。另外，正是因為有所謂逼格的存在，這一小團體會非常排斥將他們的喜好流行化，也就是拒絕認同他們的喜好已經被大眾所認知或認可。搖滾界經常有著這樣的一種說法，就是當一個地下樂隊被唱片公司看中之後，也就是死亡的開始，彷彿所有的搖滾樂隊天生就應該只能在地下混，一旦混出名了，商業化了就搖滾已死了。這種說法看上去很可笑，但是卻能迎合很多人的想法，因為喜歡的東西小眾，才能證明自己跟別人不同，才能凸顯逼格，這也就是大多數人自覺或不自覺裝逼的心理因素之一吧。 但是話說回來，這種說法其實是很不負責任的。憑什麼樂隊要拒絕商業化，拒絕流行化，一直在地下混才是所謂的真搖滾呢。搞樂隊，玩搖滾，就是圖出名，圖大把大把的鈔票有什麼不好的，為了迎合少部分人逼格的需求而拒絕流行化，這對樂隊來說太不公平了。因此，我一直對目前的主流搖滾樂隊，尤其是朋克樂隊的批評感到不以為然。就好像ＮＯＦＸ對ＧＤ的批評一樣，雖然前者所有的專輯銷量還不及後者《美國白痴》銷量的零頭。 現在ＭＣＲ火了，很多人就開始說他們已經不是真正的ＥＭＯ了，就好像ＧＤ火了，就有人說他們不是真正的朋克了。搞的好像要幫搖滾界的ＥＭＯ流派清理門戶一樣。好在ＭＣＲ也根本不甩他們，不僅大方承認他們已經不是ＥＭＯ了，而且還說ＥＭＯ就是一坨屎。至此，可以說ＭＣＲ已經與ＥＭＯ分道揚鑣了。這也沒什麼不好的，堅持ＥＭＯ有什麼用，如果不能帶來更多的鈔票的話。 說到ＥＭＯ還有個很有意思的話題，就是網上流傳的所謂成為一個真正的ＥＭＯ要做到哪些東西，什麼每天要堅持寫日記啦，唱歌要摔話筒什麼的，基本上我已經忘光了。現在隨著ＭＣＲ的解散，應該也沒什麼人再去討論ＥＭＯ了吧，差不多也可以算作是時代的眼淚了。每個時代都有著對應那個時代的音樂風格，ＥＭＯ這種最多只能算是曇花一現吧。 回到ＭＣＲ上來，就像我在前面所講的那樣，我當然也去找了樂隊其他專輯來聽，但總的來說都有種聽不下去的感覺，果然ＥＭＯ什麼的像我這樣的俗人是欣賞不了的。《The Black Parade》在樂隊的音樂作品中顯得非常突兀，就好像《挪威的森林》在村上春樹的作品中顯得比較突兀一樣。而１０年推出的那張專輯，則基本上可以說是一張普通的流行搖滾專輯了，表現普普通通，我也不打算在本文中花費更多篇幅去講它。在那之後，樂隊就解散了，我倒也不太關心他們為何解散。 但不管怎麼說，《The Black Parade》絕對是一張值得去細細品析的搖滾專輯，它不僅是ＭＣＲ本身的巔峰之作，想必也一定在搖滾歷史上佔有一席之位。它代表了一個樂隊的最高水平，或許也是不少人青蔥歲月的回憶之一吧。","link":"/2016/01/24/2016-01-24-my-impressive-rock-album/"},{"title":"歡迎來到我的個人博客","text":"這是我第一次自己嘗試搭建一個個人博客，如果你也對此感興趣的話，可以參考這個教程：[hexo教程](http://zipperary.com/categories/hexo/) 我打算建立一個個人博客的原因非常簡單，主要就是因為這麼一路實習過來，不知不覺間也漸漸總結出來不少技術筆記和心得。原先為了省事，一直都是將它們比較分散地記錄在我的幾個本子上面，當然這種做法的不便之處是顯而易見的。我也有考慮過要不要使用以下印象筆記之類的筆記類應用，不過考慮到發布在網上更方便有需要的人士閱讀，而且也比較安全，不會丟失，因此我最終決定試著搭建一個個人博客出來。 目前搭建自己的博客有多種方式，比較出名的有Jekyll，octopress，hexo，pelican等等。前面兩個比較出名，不過經過一番搜索和對比之後，發現這兩種搭建方式比較複雜，而且不便於在Windows平台上進行搭建，因此我最終選定採用台灣tommy351先生的hexo來搭建自己的個人博客。hexo的另一個好處是它生成靜態頁面的速度比較快，尤其是當你的文章數量比較多的時候，這種優勢會變得更加明顯。 在我目前的安排中，這個博客將主要為我的一些技術心得和相關筆記的集結地，從而便於我所實習的公司中的相關同事閱讀和查閱。不過在時間允許的情況下，我也打算寫一些其他的諸如讀書筆記，時政評論這樣的文章。文筆自是需要反复磨練的，再加上MarkDown那無比簡單優雅的語法，令寫作似乎也變成了一件十分享受的人生樂事。 這篇文章的發表主要是作為測試之用，如果一切順利，我會在後面陸陸續續地把我原先撰寫的教程搬到這裡。 謝謝你的閱讀！","link":"/2014/03/13/about/"},{"title":"新海誠 -《雲之彼端》：宏大背景下的蒼白敘事","text":"就好像我在我的搖滾專輯回顧博文中所講的那樣，從小到大看過那麼多部作品，有些一定會令我們念念不忘。它們未必都很完美無暇，但它們總是會有一些特質值得我們去一再地回味和感受。對我來說，新海誠的《雲之彼端，約定的地方》（後簡稱《雲彼》）就是這樣的一部作品。本文算是對這部作品的一個回顧，或者準確地說是對其同名小說的讀後感吧。這是我第一次比較完整、細緻地去回顧新海誠的作品，在他的新作品問世之前，應該也會是唯一的一個回顧。 日本的動漫作品我過去看過不少，印象深刻的也有那麼一些，不過有幾個題材我是會刻意迴避的，其中一個就是描寫初高中生生活的青春類型的作品。我並不是對這類作品持有偏見，只是單純地不想看而已。當然到了我這個年紀，也總算是可以坦率地說出最根本的原因是什麼了，很簡單，因為我很清楚我自己的青春是多麼的蒼白無力。擁有平淡如水般過去的我，看到影視作品中那些絢爛多姿的青春生活，心中難免會產生一些不平衡。雖說這樣顯得我確實是會有些小肚雞腸，也有一葉障目之嫌，不過閱讀書籍，觀看影視作品，本身不過就是一種休閒，一種對煩悶生活的調劑罷了，又何必自己給自己找不愉快呢？當然，並不是說我就完全沒有接觸過這類的作品，如果作品中存在一些超現實的設定，比如科幻啦，神話啦之類的要素，或者作品本身對愛情著墨不多，或者以悲劇收尾，或許我還是願意一看的。這樣想想，果然自己也是夠賤的。 這部作品於０４年年底左右在日本上映，傳到中國來大概也沒有過很久吧，因為如果我沒有記錯的話，我大概是在０５年的時候就看了這部作品，當時我還在上初中。這部片子在當時的我眼中是無比的晦澀難懂，甚至在此後的幾年之內都一直是我心目中最難懂的一部作品。當時不像現在，新海誠遠沒有像今天這樣在國內擁有這麼高的知名度，相關的資料也極為匱乏，因此當時年幼的我在看完之後就到網上搜索相關的訊息，結果搜了半天也沒搜到什麼有價值的東西，不過倒是有個人提到了一個名詞叫做：「平行宇宙」令我印象極為深刻。「平行宇宙」是什麼東西？當時的我並不明白，而且因為一直沒找到一個比較完整系統的對本作劇情的解釋，所以在我的心中一直有著這樣的一個心結，這或許也就是我直到今日依然對這部作品念念不忘的原因吧。作品總有完結之時，然而我們的生活還要繼續，就當我的生活繼續這樣枯燥乏味地向前行進之時，偶然在網易雲音樂中響起的一段旋律一下子勾起了我對於本作的全部回憶。我突然發現我對本作依舊是印象深刻，算算時間，竟也已經過去了差不多１１個年頭，想來真的讓人唏噓不已。 我再次到網上搜索關於這部作品的相關訊息，這一次則多了不少。很多人因為《秒速五釐米》（後簡稱《秒五》）認識了新海誠，於是開始關注他的早期作品，因此《雲彼》也就走進了大眾的視野。在瀏覽這些訊息的過程中我注意到有不少人提到了跟這部作品相對應的同名小說，並且提及了一些在原作中沒有提及或簡單帶過的一些細節，更重要的是很多人都認為這部小說比起原作要更為完整，劇情上也更為出色，因而我突然意識到，或許通過閱讀這部小說，能讓我對這部作品有一個比較清晰全面的認識。也就是這樣，我迅速地在淘寶上下了單，迅速地在過年回家的列車上讀完了這部小說，也因此有了想要回顧這部作品的想法，也就有了本文。 就好像我對聽過的搖滾專輯做回顧一樣，對看過的動漫作品做一個回顧感覺也是有必要和蠻有意思的一件事，那麼不妨就將本作作為我回顧動漫作品的一個起點吧，想來也是一個不壞的主意。 啊，好像前面講了不少廢話，那麼事不宜遲，我們馬上開始吧。 背景設定及人物介紹 我們先從本作的世界觀開始講起吧，關於本作的故事背景，很多網站上都作了足夠詳細的描述，不過相比較而言果然還是小說原文要顯得更加細緻和具體，摘錄如下： 一九四五年，蘇聯背棄了日蘇和平條約，於十月攻陷了北海道。在一九五〇年，日本恢復了獨立的主權之後，當時的北海道也另立了「蝦夷」的新名號歸屬到蘇聯體制之下。一九六五年，赫魯曉夫在第二十屆共產黨大會上宣佈統合蘇聯、東歐、西亞所有共產主義國家的統一政體「聯邦國」誕生。一九六〇年代後半，蝦夷內部民族主義運動高漲，因應這個情勢，聯邦國於一九七五年與日本斷交，使得日本南北分裂的情勢便一直持續到了今日。 夏之章頁十七 蘇聯統治著日本的北海道，也即本作中的「蝦夷」，其南部即為日本本州，由美軍負責地區防務工作。兩地之間隔著一條津輕海峽，其以本州側的津輕半島而得名。本作的男主角之一「藤澤浩紀」的家鄉便位於隸屬於青森縣的津輕半島。因應冷戰情勢，日本以這條海峽為界形成南北分裂之勢。聯邦國在蝦夷上建造有著高度直達雲端、被稱為「聯邦國巨塔」的神秘建築物，這座神秘巨塔是本作主人公：「藤澤浩紀」（後簡稱「浩紀」），「白川拓也」（後簡稱「拓也」）和「澤渡佐由理」（後簡稱「佐由理」）無比憧憬並彼此約定一定要到達的地方，同時它也是造成美國與聯邦國軍事衝突的導火索，以上便是本作的背景介紹。 老實說，看待這樣的故事，尤其是這種基於真實發生過的歷史事實改編而來的故事，切忌不要太較真，因為當你一想到故事裡面那數不清的槽點，你就一點都感動不起來了，所以我們不妨放寬心態，以單純地欣賞一個假想故事的態度來去面對它。不過這又會涉及到另外的一個問題，就是「設定」與「劇情」的關係問題。 應當說「設定」與「劇情」是構成一個完整的作品的不可或缺的兩個要素，然而對這兩者的偏重上的不同，會使得讀者在欣賞本作時有著完全不同的觀感。有些作品輕設定重故事，有些則反之。或者說有些作品是因為有這樣的故事，才有了相應的設定，而有些故事則是因為有著這樣的設定，所以才需要編織出於此相對應的故事，這兩種完全不同的出發點會極大地影響到故事的發展，以及作品的內涵。我們不能簡單地評價說這兩種創作思路孰優孰劣，然而簡單地被讀者看出其中的端倪，則無疑會令作品本身對讀者心靈的衝擊大打折扣。在我看來，新海誠的這部作品，以及之前的《星之聲》就有著這樣的毛病。誠哥大概是希望在作品中表達出一些自己想要表達的東西，因此構想出了這樣的設定，然後有了與此相對應的故事，像這種通過設定來展現故事本身的魅力，來表達自己的內心所想，無論怎麼說都算不上是一種高明的手法。因為我相信，一個真正優秀的作品，是完全可以只靠故事本身就可以打動別人的，是完全可以只透過劇情本身就可以向觀眾們傳達自己的想法與感觸的，而不是靠著一些天馬行空、匪夷所思的世界觀設定來賺取觀眾廉價的感動與共鳴。正因為如此，我對誠哥的下一部作品《秒五》評價很高，因為他終於願意捨棄那些龐大繁雜的背景設定，專心地講述一些簡單但是卻能立足於現實，從而無比觸動人心的故事了。老實講，我認為新海誠不太適合去創作那種擁有宏大格局的史詩級作品，以《雲彼》為例，厚重的背景設定卻配上了清新近乎超現實的愛情故事，這樣一種極大的落差，令人不知所措。而反過來看《秒五》則剛剛好，故事足夠簡單，人物心裡描寫也足夠細膩，並且因為故事極為貼近現實生活使得短短一個小時左右的作品卻能夠讓人回味無窮。我想這也是使得《秒五》得到比《雲彼》更多關注的原因之一吧，或許這也說明了誠哥的創作日趨成熟，終於擺脫了那些中二甚至幼稚的設定與構思。 回到《雲彼》作品本身，我們先從本作的故事開始講起吧，這也是最令我感到頭痛的地方，因為單純只觀看電影版的話，尤其是像我這種智商比較低的，真的不是很明白到底講了一個什麼樣的故事。故事不僅講得支離破碎，再加上人物故事與故事背景的交叉闡述更是增加了觀者理解的難度。相比之下，小說版在這方面則處理的比較好，不過這或許也跟信息的載體形式有關。畢竟作為一部電影，導演可以根據畫面、對白、音樂等諸多元素來表達內心所想，推動故事前進，然而小說只有文字這一種載體，為了包含與電影版同等甚至更多的信息量，則必須用大量的文字來進行描述，這時就很考驗作者的文字功力了，因為過少的描述會影響讀者對故事的理解，而過多則會顯得拖沓和囉嗦。好在本作的同名小說作者：加納新太在這方面處理得非常出色，足以證明其在文字編排方面的造詣頗深，使得我最終得以瞭解到整個故事的全貌，也算是了了我十年來的一樁心事吧。下面我就對本作所講的故事進行一個簡單的介紹： 本作主要涉及到以下幾位人物： 1. 藤澤浩紀 本作男主角，內向不善言辭，對飛行技術充滿興趣且造詣頗高，因對塔無比憧憬，與拓也一起建造實體飛機（Vela ciela，意為白色的羽翼）並和佐由理約定一起坐上飛機去一探究竟，喜歡身為同班同學的佐由理 2. 白川拓也 本作男配角，浩紀的同學兼好友，理性成熟，通常意義上的天才且有著極佳的異性緣。極為擅長理工科，同樣對飛行技術充滿興趣且能夠迅速掌握，對佐由理有好感，後加入富澤主導的研究員，進行對塔的研究 3. 澤渡佐由理 本作女主角，如鄰家女孩般美好的開朗美少女，會拉小提琴，與浩紀和拓也約好一起飛躍海峽到塔那裡去一探究竟 4. 岡部 是兩位男主角為賺零錢造飛機而去打工的軍火工廠的社長，其真實身份為反聯邦國的非政府武裝組織「威爾達」的首領，妻子因南北分裂使得二人無法相見，其組織目標為炸掉北方那座塔 5. 富澤常夫 為隸屬於青森軍事學院的戰爭時期特殊情報處理研究室室長，做著巨塔的研究，與岡部是舊識 6. 笠原真希 富澤研究室研究腦科學的年輕研究員，喜歡比自己小的拓也 除此之外，還有一個不曾出場但在作品中有所提及的人物：埃克森.月野江。他是佐由理的爺爺，一位學識淵博的物理學家，正是由他主導建造了那座白色巨塔。 接下來咱們來談談這座塔，聯邦國耗費巨資建造這樣一個高聳的巨塔（我們就不要在意當時人類有沒有這樣的建造能力這種細節問題了．．．）究竟是有什麼意義呢？簡單來說，這座塔是一種可以探測和捕捉所謂「平行宇宙」信息的一個設施，通過捕捉到的信息科學家們可以對未來進行預測，從而對科技、軍事和政治產生深遠的影響。那麼問題來了，什麼是「平行宇宙」？小說中是這麼解釋的： 「也許用這個世界來取代宇宙這個詞彙會比較容易理解也說不定。」真希滔滔不絕地開始解說。「這個世界也許可能會朝各種不同方向發展，因而醞釀出不同的未來。而這種可能性就隱藏在這個世界的夢裡面，我們將這些不同的可能性稱之為平行世界，或者是分歧宇宙。」 沉眠之章頁二一〇 為了進一步地對這個概念進行說明，小說拿拋硬幣這個來進行舉例。簡單來說就是我們知道正反面的概率分別為百分之五十，雖然我們在實際拋出並落地之後可以知道答案是確定的，然而這個答案卻不是在拋出之前就已經決定好了的，而是在我們拋的時候這個世界就已經分成了硬幣正面朝上或朝下的兩種世界，而最終的結果在我們眼前呈現的瞬間，不過是各個事件中的各個可能性之間，跟其他的世界並排在一起的其中一種結果。那一般來說我們是無法接觸到平行宇宙，也就是包含該事件其他可能性的世界的，然而拓也的研究重點就在於如何建立當前宇宙與其他平行宇宙之間的聯繫，而真希研究的主題則是研究這些平行宇宙對人腦和夢境所能造成的影響，生物的腦可能從上古時期就能夠在下意識中感受到平行世界的相關情報，而這也就是人類所謂的預知能力的來源。 總之這玄之又玄的概念確實讓當時身為初中生的我大開眼界，同時也展現出誠哥對現代物理學和建築學深刻的意淫，果然我只能說你開心就好。不過後來據我瞭解，貌似「平行宇宙」這個概念也不是誠哥首創，在很多科幻作品中都有過類似的表述，不過具體的我就不是很瞭解了。 劇情梳理 接下來按照時間線來對故事進行梳理，如下： 佐由理的爺爺是第一個證實「平行宇宙」存在的科學家，為了通過研究「平行宇宙」實現對未來進行預測的能力，由這位老先生主導在蝦夷建造了這座白色巨塔。塔接收到的關於平行宇宙的訊息會通過空間置換的方式來進行呈現。所謂空間置換也就是將平行宇宙的一部分與現實世界中的一部分進行替換。然後不知道怎麼搞的，（這也是槽點之一）塔接收到的平行宇宙訊息進到了佐由理的腦中，導致她的大腦因為不堪重荷而陷入沉睡之中，不過卻避免了以塔為圓心的對現實世界的進一步的吞噬。佐由理將近沉睡了三年左右的時間，在這期間她一直在宇宙的夢中徘徊，等待著有人能夠找到她。然而如果她醒來，會因為沒有了可以抑制塔的力量而導致整個宇宙都會被替換掉的後果。換言之，塔的空間置換範圍是與佐由理的情形程度呈正比的。（這都什麼鬼玩意兒，淨他媽瞎扯淡） 浩紀跟拓也因為對飛行技術的痴迷而相識，又因為都對那座白色巨塔感興趣而打算一起建造一個實體飛機（也就是Vela ciela），然後飛到塔那邊去一探究竟。佐由理是他們的同班同學，在知道他們的這項計劃之後也對此事充滿了興趣和憧憬，因此三人約定將來一起坐飛機去看塔。這也就是片名中的「約定」所指的具體的事情。（然而當時就沒人發現這飛機只能坐兩個人麼。。。） 後來因為佐由理的莫名失蹤，浩紀跟拓也苦尋無果之餘，連帶著也對建造這架飛機失去了興趣。在那之後二人分道揚鑣，浩紀為了擺脫白色巨塔給他造成的心裡陰影而選擇來到東京就讀高中，而拓也則繼續留在當地，並因其在物理學上的造詣獲得賞識，高中階段就得以進入富澤主導的研究室進行對塔的研究。 然而佐由理實際上並沒有失蹤，而是陷入了沉睡之中，原因就是我在前文中所講得那樣。她因為被懷疑患有嗜睡症而被送進醫院，後來因發現她的睡眠與塔的活動有關而被送到了富澤研究室，這一呆就是三年，在這期間佐由理一直在荒涼的平行宇宙中一個人獨自地徘徊著，這個宇宙其實就是美日與聯邦國開展之後的日本，因此在小說中的描述才會有著各種斷壁殘垣的一番戰後景象的描述。這三年中佐由理在夢境中唯一與現實世界有所聯繫的就是那架Vela ciela，也就是那個約定，由此可以推斷出浩紀和拓也是唯二有能力拯救她的人。 浩紀在東京求學期間一直無法忘記那座塔，忘記佐由理，忘記他們三人之間的約定。他不斷地夢到佐由理在一片斷壁殘垣中獨自徘徊的夢境，然後因為一些因緣際會的原因令他得知佐由理身處拓也所在的研究室這一事實。他打算拯救佐由理，而方法就是完成他們在那年夏天所立下的約定。拓也實際上也是很晚才瞭解到佐由理就在自己所工作的研究大樓中，在這三年中他也一直被那個約定所束縛著，使得他對那座塔心生恨意。當得知岡部的組織「威爾達」成立的目的就是為了要炸掉塔時，便決定加入這個武裝恐怖組織，並在一次祕密行動中受傷。（就是岡部帶著一幫人坐上一艘快艇偷渡到海峽對岸，與聯邦國反水的軍官進行對塔進行爆破作業的交涉時被發現，在逃回本州時手臂不行中彈）拓也在看到一直處在沉睡之中的佐由理消瘦的軀體時不禁熱淚盈眶，然而在得知她醒來之後整個世界都有被置換掉的危險之後，最後也認為佐由理繼續保持沉睡是最好的選擇。與此同時富澤也告訴他，美軍對佐由理非常感興趣，認為她對美國研究「平行宇宙」會大有裨益，並且決定不日便將她移交給美國的研究所。 此時由於美國認定那座白色巨塔具有極大的軍事威脅性，南北戰事一觸即發。拓也發現浩紀在繼續飛機的建造工作時先是阻止，但是在經過一番掙扎之後，終於同意繼續飛機的建造工作，與浩紀一起完成當年的約定。因此拓也偷偷地將佐由理從研究所中運了出來，送到了二人建造飛機的廢棄車間裡。這裡需要插播一些細節，就是研究所每個人都有標識自己身份的識別卡，具有打開研究所的門（或者還有上班打卡的功能？）等功能。拓也自己的識別卡無法打開佐由理所在的病房，因此騙取了對他有好感的真希的識別卡，用它打開了佐由理的病房，並將她偷偷地帶了出來。然而在他準備坐車離開研究所時，遭到了富澤的阻攔。富澤警告拓也說，因為佐由理需要被送至美國進行跟「平行宇宙」有關的研究工作，因此一旦拓也將其偷偷帶走，別說繼續擔任研究員了，因為會受到美日方面的追捕，而終生都不能在非共產主義國家生活了。然而拓也依舊執意要帶走佐由理，富澤最後也沒有阻攔。 與此同時，因為浩紀跟拓也知道岡部打算在南北開戰之後就把塔炸掉的計劃，因此決定偷偷溜到過去他們打工的那個軍火工廠中，（事實上這個工廠只是個幌子，實際上一直都是「威爾達」祕密活動的基地，美軍對此知曉但睜一隻眼閉一隻眼）因為爆破塔所使用的制導導彈就在這座工廠裡面。他們原本打算對這枚導彈動點手腳，讓它晚爆炸甚至是不爆炸。然而卻被岡部發現了。經過一番爭鬥，兩人相處了一個兩全其美但是卻極為冒險的計劃：就是將導彈掛載到兩人建造的飛機上，然後由浩紀負責帶著佐由理，在南北戰爭的掩護之下，飛到海峽對岸的塔那邊。待佐由理醒來之後，發射導彈將塔炸掉，岡部最終同意了這個計劃，將導彈和發射代碼交給了二人。 最後浩紀趁著夜色，帶著佐由理乘坐飛機穿越聯邦國與美軍的戰區，成功來到了塔那邊。然後佐由理成功醒來，塔被炸掉，二人平安地回到了廢棄車間，然而此時拓也已經失去了蹤影。 這裡還需要補充一個細節，就是當浩紀駕駛著Vela ciela來到那座塔周圍時，佐由理終於在夢境中見到了浩紀。其實我們可以認為塔所接受到的平行宇宙訊息就是佐由理的夢境，那麼按理來說來自現實世界中的一切事物都應當消失不見才對，然而浩紀並沒有消失，事實上也就說明了佐由理已經選擇了浩紀作為唯一允許留在她身邊的人，因此佐由理藉著高塔，在夢中向浩紀告白了。然而因為塔的毀滅，佐由理在夢中的記憶全部消失不見了，因此她也就忘記了自己對浩紀深深的感情。這也就是在影片最後，為什麼佐由理一邊流著淚一邊說著自己忘記了什麼很重要的事情，要對浩紀講的很重要的事情。浩紀知道是什麼事情，雖然佐由理忘記了她對自己的感情，但是她畢竟已經醒過來了，約定已經達成，人生還得繼續。看似一切圓滿，不是麼。 影片到這裡就結束了，留給人無限的遐想。在小說沒有出來之前，相信很多人都認為這是一個皆大歡喜的結局。不過卻不能解釋影片的開頭，已經成年的浩紀為何孤身一人再次來到青森，來到那個三人曾經立下約定的地方這個問題。事實上我們可以猜到，佐由理和浩紀最終沒有在一起，並且小說的結局，正是如此。 具體是怎麼一回事呢？因為原文比較長，這裡就不做摘錄了，簡單來說就是在那之後，佐由理跟浩紀在青森同居三年，最後佐由理決定自行離開，因為她覺得過去六年的生活，（沉睡三年加同居三年）是空白的，她希望能夠彌補過去六年的空白，取回那些她所失去的時光。同居三年佐由理認為很幸福，然而她與這個世界的接觸就只剩浩紀一人了，因此她打算一個人生活看看，嘗試著自己直面這個世界，不再依賴浩紀而是選擇自己要走的道路。因此，沒有留下任何聯絡方式和將要去的地方的地址，佐由理就這樣從浩紀的生命中消失了，唯一剩下的，就只有一句「偶爾想起她一個人靠自己力量在某個地方努力」的囑咐。關於小說的結局還有一點需要補充的，就是佐由理離開浩紀隔年，浩紀收到了岡部捎來的一封信，裡面是他與他多年未見的妻子的合影。另外，在炸塔事件之後的十幾年間，浩紀再也沒有見過拓也，只是在五年前收到了拓也寄來的高中三年的日記，包裹顯示是從聯邦國寄送過來的。後面有一次浩紀偶然見到了真希，兩人簡單地打了個招呼然後簡單地道了別，浩紀覺得真希笑起來一定很美，然而在他們碰面期間，真希完全沒有任何笑容。她說，自那以後她再也沒有見過拓也。 小說的最後是浩紀緊握著不知何時拍的三人的合照，雖然已經不記得是什麼時候拍的，但是依然能夠感受到當時的那種一無所懼的勇氣。如今塔已不復存在，約定的地方已經沒有了，三人也走上了完全不同的人生道路，留下的除了回憶，還有什麼呢？ 劇情缺陷淺析 小說的結局我認為是分析本作的一個重點，這個我會放在後面重點去談我自己的看法。接下來讓我們還是先回到這個故事本身，我想談談故事中存在哪些問題。 應該說本作劇情上的硬傷還是非常明顯的，其實最大的問題並不在於那些超現實的設定，（比如說什麼初中生就會造飛機，才這麼點人的小工廠卻能拿到美軍的訂單，人類能夠建造這樣一座如此之高的巨塔，飛過戰區毫髮無傷，能夠毀滅世界的危機被輕鬆解除之類的）因為它們雖然看上去非常的匪夷所思，但是至少邏輯上勉強還講得通，所以我們排除掉不談。還有就是我前面也有提過的，厚重的故事背景與超凡脫俗的愛情故事相搭配，顯得本作有些不倫不類，相當程度的違和感降低了本作對人心靈的衝擊。另外，本作似乎花了相當的篇幅去解釋「平行宇宙」等物理概念，然而辛苦構思出來的高深的科學話題竟只是為了包裝這樣的一個簡單的愛情故事，顯得尤為的雞肋和沒有必要，並且也使得整個劇情看上去比較零散。除了令我們意識到誠哥腦洞巨大，影響我們對本作的理解之外，並無多大用處。然而事實上即便如此，本作中依然由很多問題沒有交代清楚，而這也就是我接下來要講的。 白色巨塔，是男女主角們憧憬和約定的象徵，可以說它是貫穿整個故事的一個非常重要的線索。然而面對這麼重要的事物，本作的處理卻顯得非常的敷衍和隨意。 首先是塔是如何與佐由理建立聯繫的，這一點基本上沒有任何交代。根據時間線來看，佐由理的爺爺很早就到了聯邦國，（感覺這位老人家應該是一個蠻重要的人物，沒想到就在小說中簡單地提了一下就沒有下文了。另外小說中也有提及佐由理的母親，然而也是只露了一面，就再也沒有提及過了）塔也在佐由理出生之前就建好了，因此兩人很可能是素未謀面。然而就算見過，為什麼要把塔接收到的訊息傳送到佐由理的腦中，這個重要的問題沒有得到任何合理的解釋。總不能說因為是她爺爺就要這麼做吧，這不是坑人家小姑娘麼。 還有就是關於塔的作用，雖然這個在前面已經解釋過了，但是依舊疑點重重。按照本作的設定，聯邦國的科技水平是比美國統治的日本南部要先進不少的，而且解析來自「平行宇宙」的訊息能夠幫助科學家對未來進行預測，看上去非常厲害的樣子，然而這一點卻在故事中沒有任何的體現。這座塔已經建立很久了，然而除了吞噬掉以它為圓心的一大片區域之外，並沒有什麼卵用，更何況吞噬掉的還是自己的領土，就算想拿它作為武器來對付美日聯盟也做不到。那乾脆讓整個地球都被置換掉？先不說有沒有必要做到同歸於盡這一步，況且就算真的是這個目的，為什麼在看到這麼多年吞噬的範圍沒有多大變化的情況之下，卻什麼都不做？其實這個問題跟前面一個問題是有關聯的，因為如果建立塔跟佐由理的聯繫是其爺爺的意思，那麼聯邦國就這樣由著她爺爺胡來嗎？那麼如果不是她爺爺的意思，那麼這個聯繫是怎麼建立起來的？誠哥你既然花了那麼多的篇幅去講那些虛無縹緲的科學概念，為什麼不多花點心思去解決這些邏輯錯誤？總的來說就是塔的作用還是不明，從結果來看，除了吞噬自己領土之外沒有任何卵用，這麼多年了也沒有取得什麼成果，那耗費巨資建造它的原因是什麼，單純只是為了讓這幾個少年少女能夠有一個憧憬之地麼？另外，為什麼佐由理清醒之後，世界就有被全部置換掉的風險？（或者說巨塔吞噬的面積為什麼和佐由理的清醒程度呈正比？）好吧，我們就認為因為某種原因，佐由理和塔建立了類似共振一樣的聯繫好了，小說中的解釋好像是說正是因為有了佐由理在沉睡的過程中，不斷地接收塔發來的訊息導致吞噬進程得以減緩。那這麼看來還好有這位女孩存在咯？聯邦國自己耗費巨資建造出來的東西，自己卻完全掌控不了，而只能靠一個嬌弱的小女生，這不是很可笑麼。退一萬步來說，就算自己真的掌控不了，那自行把塔毀掉不就好了，為什麼一定要由敵對方來做這種事？花了好多錢建造出來的東西，這麼多年都沒有什麼實際的用途，自己掌控不了它又不願意毀掉它，而且貌似也沒怎麼在守衛這個問題上話太多心思，否則浩紀他們沒可能那麼容易就得逞。總感覺在這整件事情上，聯邦國就是個冤大頭，這樣一看就會覺得這一整個故事都是那麼的荒誕不經，又何來感動這一說呢？ 前面有談到關於「設定」與「故事」這兩者關係的這一問題，其實我們可以很容易地推斷出，南北分裂這樣的設定，就是為塔而服務的。然而本作並沒有為這個設定花費更多的筆墨去描述，聯邦國的存在感也在本作中極為低下，因此這樣的設定直接淪為了塔存在的必要條件，使得整個故事看上去架子很大，但是卻內容空洞。其實這樣的設定本身是很棒的，容易營造出各類的衝突和矛盾，從而可以擴大電影發揮的空間，然而這樣的處理卻顯得這個設定可有可無，不得不說這又是本片的一大遺憾。我不知道是我太較真還是說誠哥真的駕馭不了一個這樣由著宏大背景的故事，總而言之故事講成這個樣子真的是令人蠻失望的，而且小說中至少還有一些牽強附會的解釋，對應到電影中則真的是無厘頭了。 另外關於片中男女情感部分，其實處理得也不算好。浩紀跟佐由理的感情缺乏足夠的鋪墊，使得最後兩人之間那強烈的情感顯得說服力不夠，同時也令兩人表現出來的寂寞和愛顯得矯揉造作。不過這一點在小說中則處理的較好，畢竟添加了很多影片中沒有的細節進去，也算是在某種程度上彌補了本作的缺憾吧。 故事方面就談到這裡吧，不能繼續細說了，否則真的變成批鬥文章了。接下來我們來看看本作中的主人公吧，也就是浩紀，拓也跟佐由理。 講到浩紀，其實他是三人中跟我們最為相似的角色。（你確定？人家不僅會開飛機還會造飛機誒）內向、膽小、自卑、有些孩子氣般的品性，且是一個重度的孤獨症患者。當然他也是有優點的，那就是對佐由理的愛戀之情始終不渝，因而最終得到了佐由理的芳心。面對這樣的一個痴情的少年，我們應當給予其一些掌聲。當然，因為他是主角，所以能夠成功進入到佐由理的夢中並與她在夢中相見，能夠毫髮無傷地駕駛著飛機穿過戰區，炸掉塔然後平安返回，不過這些因為是劇情需要了，所以也不是不能接受的吧。其實本作中還有一個細節，就是浩紀跟佐由理落入水中之後，拓也想伸手拉佐由理上岸，然而卻被浩紀一手也拉到水裡。雖說不算什麼太大的事情吧，不過他這麼做大概是不希望拓也能夠直接接觸到佐由理，從這一點我們也能夠發現，他其實也是一個佔有慾很濃厚的一個人。 講到拓也，自然是那種通常意義上的天才加萬人迷了。女人緣不斷的他真是讓我等宅男無比羨慕啊。然而他的結局在我看來是最悲慘的，終生都只能遠離自己的家鄉，一個人孤伶伶地在聯邦國漂泊著，而且除了真希一直惦記著他之外，好像也沒別的什麼人在意他了。他付出了那麼多，冒著那麼大的風險，最終也沒能換來佐由理的芳心，也不能再與跟他兩情相悅的真希見面。其實三人中只有他是對那座塔最為執著的，哪怕在佐由理憑空消失之後這一點也沒有變化，他選擇的是直面巨塔，而不是像浩紀一樣千方百計地逃離故鄉。為了炸掉塔，他願意冒著生命危險參加「威爾達」而因此受傷，為了幫助摯友完成當年的約定，他甘心冒著巨大的風險將佐由理偷偷地從研究院運了出來。他在我眼中是一個真正的漢子，最後落得如此結局，我於心不忍。 最後講到佐由理，其實沒有什麼太多好講的，就是普通意義上的女神吧，人長得漂亮性格也很好，是一個讓人感覺很舒服的女孩子。小說中有提到一個細節就是在中學升級換班之後，佐由理因為無法融入新的班級的女生圈子，因此才跟兩位男主打得火熱，由此也可以看到她當時在男生中間是多麼地受歡迎，畢竟作為女生或多或少都有一些嫉妒心理的吧。從情感方面來進行分析，我認為在她憑空從兩位男主身邊消失之前，應該說並沒有特別地對某個人有好感，而應該是把他們都看作是非常重要的朋友吧。佐由理真正開始喜歡上浩紀，在我看來就是在夢中的那段無比孤獨的歲月中逐漸萌生出來的吧，因為只有浩紀一個人能夠聽到她的心聲，能夠走進她的夢中。另外比起浩紀，拓也並沒有那麼地喜歡佐由理，在她消失之後，馬上就結交了新的女朋友，為此也讓浩紀大為光火，所以佐由理最後選擇了浩紀也不奇怪。 事實上浩紀在一個人來到東京求學之後，也有遇到一位女孩子。小說中對此的描述比較豐富，他雖然對這位女生抱有好感，但卻一直無法忘記佐由理，也因此他自學了拉小提琴，然後經常一個人一遍遍地拉著當初佐由理給他和拓也演奏的那首曲子。「３０００多萬人口的城市，想想的話，想說話的人卻一個都沒有。」這是小說中的句子，由此可以看出浩紀是一個無比痴情的深度孤獨症患者，或許他對佐由理的感情，也太沉重了一些吧。 接下來我們來談談故事的結局吧。 我不知道別人是怎麼想的，總之我對這個結局感到非常的滿意，並且也相信這跟新海誠的想法是一脈相承的。浩紀跟佐由理最後一定是分手了，小說中講得很明確，而影片在一開頭也對此作了一個暗示，所以從這一點上來看是沒有任何問題的。那麼問題的核心就在於，為什麼兩人要分手。這也是我接下來想要談論的一個重點。 對這個問題我思考了蠻久，最終我還是覺得，原因其實很簡單，就是佐由理不夠愛浩紀，就這麼簡單。什麼不想依賴浩紀，想獨自面對這個世界，依然很愛他之類的，在我看來不過是「好人卡」的高階形態罷了。這些並不是毫無根據的，首先我們來看一下佐由理是什麼時候開始喜歡上浩紀的，是在夢中對吧，佐由理沉睡的三年中，可以說她是非常孤獨的，她非常希望能有個人來陪伴著她，甚至在小說中，她一開始並沒有單純只希望浩紀一個人來陪她，而是希望兩人當中隨便什麼人都好，能夠過來陪她就行。那麼浩紀最終進到了她的夢裡，佐由理因此喜歡上他，並不是說不過去的。然而這就是真正的愛嗎？這難道不是因為寂寞所衍生出來的名為愛情實為依賴的一種感情麼。我認為從一開始，佐由理對浩紀的感情就沒有浩紀對她那樣，那麼的身後，而這也就為後面兩人分手埋下了伏筆。 很多人分析分手的原因在於佐由理醒來之後，就忘掉了她對浩紀的感情，因為沒有那麼愛了，所以選擇離開。這個當然是沒有錯的，然而在我看來並不是全部的原因。感情就算忘記了，也是可以慢慢培養的，更何況後來兩人就同居到一起去了，應該說這並不是造成二人最終分手的原因。分手的原因在我看來，除了我前面所講的，還有就是浩紀本身的性格並不算好，而且他的愛過於沉重。他將佐由理小心翼翼地放在手心中，卻忽視了佐由理真正想要什麼。沉睡了三年，佐由理希望能夠填補這種空白，然而浩紀的這種過度保護卻最終令佐由理發覺跟他在一起沒有辦法填補這段時光的空白，因此最終決定離開。 其實佐由理忘掉了她在夢中對浩紀的感情真的不算什麼，如果兩人註定要在一起，大不了從頭再來就好了。而且浩紀為佐由理付出了那麼多，就算沒有那麼愛了，好感肯定還是會有的。然而兩人卻最終分手了，這在我看來，問題只可能是出在浩紀身上，也就是我前面所提到的幾點，而不會是別的什麼原因。小說開頭提到了「失敗的成年人」，「三十一歲，帶著三十一歲男人的沉重」這樣的字眼，由此可以看出他一直都沒有走出佐由理離開所帶給他的陰影，一直活在過去當中。 比起故事的荒誕，我倒是認為這個結局非常的寫實，這個不完美卻有力的結局一下子提高了本作的水準，因此推薦大家，如果喜歡《雲彼》的話，一定要找來這部作品的小說版，認真研讀一下。另外，從浩紀的經歷以及這個結局我們也可以看出：追妹子時一定要陽光、自信，不要膽怯，不要一上來就那麼沉重。讓她感到舒服，讓她感到快樂就足夠了。當然，臉長的好看才是最重要的，這是墜好的！ 關於本作的故事和結局就分析到這裡吧，下面我們來談談本作的畫面和音樂。 淺談畫面與音樂 如果要說新海誠作品的最大特點是什麼，那毫無疑問一定是那極為出色的畫面了。精細的背景作畫，極為生動地對現實環境的刻畫，令到本作中的幾乎每一幀都可以作為壁紙來收藏。這一點無須多說，上幾張圖自然就明瞭了。 然而說到人設，則只能用悲劇來形容了。誠哥大概自己也明白自己畫人物的功力是多麼的差勁，因此影片中出現了大量的空鏡和遠景，以擅長的天空和靜物來彌補人設上的缺陷。這麼做雖然可以理解，但是在一定程度上卻也造成了畫面和對白的割裂，憑空增加了理解的難度。但是瑕不掩瑜，我們應當承認本作的作畫非常的出色，大部分的畫面都讓人非常的有感覺：美麗、傷感、孤獨、寂寥。 說到音樂，天門的音樂一向出色，此次跟新海誠合作更是凸顯默契。音樂優美且與劇情配合的天衣無縫，雖然總體來說主旋律就那麼三四種，然而豐富多樣的編曲卻不會讓人感到聽覺疲勞。總體來說還是非常優秀的。頓挫的鋼琴與抑揚的小提琴所編織出來的旋律，勾勒出青春的萌動，美麗的田園風光，少女纖細的胴體，不辭而別的悲慟，以及那猶如撥雲見日般的再度重逢。閉上雙眼，一幕幕的畫面浮現在眼前，讓我的心，久久地不能平靜。 總結 我只看過新海誠三部正式的作品：《星之聲》，《雲彼》以及《秒五》，如果說這三部作品有什麼共性存在的話，我想答案必定是那始終揮之不去的寂寞感吧。新海誠一定是一個深度的寂寞症患者，否則，那灑在穿越城市的地鐵中的變幻光影，下意識磕動雨傘濺出的點點水滴，女孩溫柔地掠起頭髮所露出的小巧白皙的耳朵等等瑣碎的細節，不會刻畫地那麼真實，那麼地讓人心動。否則，浩紀不會講出住在有著三千萬人口的城市，想要見面的人，想要說話的人，對他來說一個也沒有這樣寂寥的話語。三部作品，結局都算不上完美。或許在新海誠看來，每個人生來都是孤獨的，再熱烈的愛情，也化不開心間這如濃霧般的孤單與寂寞。 雖然存在著諸多的硬傷，但《雲彼》依舊無愧是一部優秀的作品。我想，那優秀的作畫和音樂，那懾人心魄的臺詞和對白，一定是讓我哪怕過去十年之久，卻依舊無法忘懷的原因吧。 然而故事總有結束的時候，然而我們的生活還要繼續。終究我們不能永遠停留在自怨自艾，自哀自傷的矯情做作之中。或許我們的確生來孤獨，但是如果不嘗試去做出任何的努力，就算我們再怎麼４５度地仰望星空，一切也不會有任何改變。面對現實生活，我們從來都別無選擇。 所以跑吧，男孩，快跑吧！讓我們將對青春的祭奠留在心理，背起行囊，一起勇敢地迎接那未知的未來吧！","link":"/2016/02/21/2016-02-21-yun-zhi-bi-duan/"},{"title":"我在知乎上的長篇回答","text":"這篇博文是我在知乎的一篇回答文章，原問題是：為什麼學生容易受到煽動？問題來源於今日台灣學生團體佔領立法院和攻佔行政院。這裡給出原網頁鏈接：[原問題鏈接](http://www.zhihu.com/question/23143856) 以下貼出我的回答全文，還請諸位批評指正： 我是一個年輕人。 我曾經想像過很多次，如果我身處一個民主社會，我會不會像他們一樣，走上街頭，拉橫幅，喊口號，為了心中神聖的目標和理想而盡情地揮灑著汗水與青春？ 答案很簡單，會。 我曾經幻想過很多次，我站在一個臨時搭建的平台上面，手裡拿著一個擴音器，大聲地號召台下的人們跟我一起去抗爭，去追求我們心目中真正的公義。我們要廢除一切不公義的制度，我們要讓那些屍位素餐的狗官全部滾下台來。將民主與自由的口號掛在嘴邊，我們振臂一揮，彷彿全世界都能夠聽見我們正義的吶喊。 我們集結好隊伍，浩浩湯湯一大群人地走在街上。我們手中舉著各式各樣的旗幟和標語，喊著各式各樣的口號。震耳欲聾的口號聲彷彿能夠清除一切世間的罪惡，喚醒所有蒙在鼓裡，麻木不仁的民眾與我們一起抗爭。交通因我們而進行了管制，大批警察前來，徒勞地維持著秩序，卻抵擋不住人民前進的腳步和踐踏一切罪惡的決心。 最後我們一同聚集在某個權力機構的外面，大家一起齊聲地向那些不顧人民死活的一眾狗官喊出我們的訴求。我們要求對話，卻遲遲得不到回應。最後我們奮力突破了警察的封鎖線，我們衝進了這個看似神聖不可侵犯的大樓，一眾官員早已因我們的行徑而害怕得逃之夭夭，我們掀翻桌椅，打碎玻璃，向外展示著我們的旗幟和橫幅。那一刻，彷彿所有的罪惡都因我們而被清除得一干二淨，彷彿所有的正義都得到了伸張，彷彿我們掃除了一切在我們前進道路上的障礙，彷彿全世界都聽得到我們的聲音。我們眺望著眼前那熟悉的風景，心中湧現出難以抑制的興奮：我們代表人民，再一次取得了偉大的勝利！ 你告訴我，作為一名年輕人，還有什麼能比這更能讓人熱血沸騰，充滿著勝利所帶來的成就感？ 或許每一個年輕人，心中都暗藏著試著翻天覆地的野心和夢想。 然而現實是殘酷的。 現實是，我接到了公民聯盟召集人的電話，邀請我去參加一個公民聚會活動。我因為膽怯，拒絕了這個要求，結果沒過幾個月，就傳來了許&amp;志%永被抓的消息。 現實是，我參加了一個學校的社團，只因去年社團有人在六月……%四日在學校裡擺放了幾個蠟燭去紀念二十多年前那場愛國%民主×運動，結果一批人被校領導叫去談話。可笑的是這件事還沒有結束，在第二年的大概同一時間段，社團組織社員出去遊玩，談天說地，結果不知怎麼就被校方知道了，全體社團同仁無一不被叫去談話，他們宣布我們的這個組織非法，禁止我們繼續舉辦類似的活動。 或許就是因為我沒種，我沒有勇氣，我膽小怯懦愧為男人。我關注著中國的民生百態，反對一切罪惡和不公義，但是我卻不敢公開、大聲地講出來。 因為我知道，我父母把我養這麼大不容易，因為我知道，我這一生還很長；我要盡的義務和責任還有很多，我的家庭不富裕，我還要考慮我未來的生計，維持一個家庭，贍養我的父母，還有很多很多更重要的事情等著我去做。 我不能因為這樣的事情被抓，不能因為這樣的事，毀掉我的一生。 因為我深深的知道，在一個專制社會裡面，做出這樣的事情要付出多大的代價。 所以我知道了，他們為什麼敢這麼做。因為他們知道他們身處在一個民主的社會中，他們知道社會是會包容和理解他們的，他們知道國家公權力不敢把他們怎麼樣，這是一個幾乎穩賺不賠的買賣，那他們為什麼不去做呢？ 因此在我看來，他們第一個容易被煽動起來的原因，就在於做這種事情很酷，很熱血，佔據了道義上的制高點，讓人很有成就感，最重要的是：可能需要承擔的成本並不高。因為他們知道，他們走上街頭，並不需要面對坦克和機槍。 我認識大學裡的一位教授，他在我們學校每學期都開辦公選課，還自己組織了一個讀書會，經常舉辦讀書討論活動。我以前經常前去聽課，參與這些讀書討論會，與他以及其他人一起討論時政，所獲頗豐。在這位教授的影響下，我陸陸續續地看了一些人文社科的書籍，雖然後來因為學業、找工作和實習等等很多事情，使得我的人文素養沒有持續地得到提高。（這裡插一句，我是計算機專業，非人文專業）但是我卻牢牢地記住了那位教授的一個觀點，就是： 我教給你們這麼多的歷史秘辛，講給你們這麼多的社會現實，並不是要培養你們成為憤青，而是要培養你們形成閱讀人文社科書籍的興趣和習慣，從而更加理性地面對這個社會上的人和事。通過讀書，你們會發現很多你們所想當然的事情，背後都有這深刻的邏輯和規律，這些東西你們理解的越多，你們就會越理性，這樣將來走上社會，你們才不會整天地怨天尤人，抱怨社會的不公。（原話並非如此，大致意思相同） 這位老先生的希望是自己能夠培養出來一些中國未來的政治人物，很可惜大概我不是這樣的人。我人文社科類東西懂的不多，不過卻大概理解了老先生的這一段話。從此之後，我不再會因為在網上遇到一些不公，而氣得青筋暴起，而是會思索這些不公背後所發生的原因，以及應當如何避免與解決。就算是做無用功，也沒什麼關係，畢竟懂得思考是一個人開始走向理性的第一步。 這大概是這位老先生教給我的一個最重要的東西之一，或許一個人走向成功，理性地看待社會百態就是這其中的必要條件之一吧。 所以在我看來，他們第二個容易被煽動起來的原因，就在於讀書太少，太想當然。閱歷有限，接觸面窄，不懂得理性分析造成了他們普遍的憤青心態。看到不公就想抗爭，但是卻完全不理解其背後產生的原因，結果輕則白費力氣，重則可能將整個國家拖入動蕩的深淵。 我關注近現代史，尤為關注社會運動。我懂的自然沒有那些專門學習這些東西的人士多，不過我也能大致地注意到一些淺顯的現象。有些社會運動的結果是比較理想的，推動了歷史的發展，有利於國家的進步；而有些則比較糟糕，自身可能遭遇摧殘，歷史還可能因此而開倒車。有些社會運動被政客所騎劫和利用，有些則會遭遇到國家機器的野蠻報復。 社會運動是否能夠取得成功跟很多種因素有關，我個人認為可能主要是取決於民眾與公權力的勢力對比。學生運動能否取得成功，則可能主要在於學生的訴求是否代表了社會中大多數民眾的心聲。（當然代表了大眾心聲也未必就能取得成功，因為還要考慮公權力是否強大，不過這應當是成功的第一步） 學生畢竟只是社會中眾多團體中的一個，要想讓運動變得聲勢浩大，提出來的訴求必須與社會中的大多數人利益有關，且其訴求須符合社會上大多數人的訴求。舉一個最近的例子，香港反國教運動就算是一個比較成功的學生運動。運動由學生團體“學民思潮”發起，最終導致十幾萬人包圍政總，成功逼迫政府同意撤回國民教育科。在這場運動中我們可以發現，包圍政總的不光有學生，還有很多各行各業的市民，這就是學生的訴求反應了大多數人的心聲，導致更多的人走上街頭，從而最終使得運動得以成功的重要原因。 反觀今次台灣學生佔領立法院和行政院，人數不多就不說了，佔領的這些人也已學生為大多數，奇怪的是服貿協議應該是直接關係到台灣的各個中小企業才對，與學生團體應該算是間接相關，怎麼只見學生上街不見那些中小企業的員工和企業主出來表達訴求呢？這些員工和企業主的訴求會不會是被這些學生代表了呢？ 自學生佔領立法院之後，我就對這場學生運動比較反感了，而後面他們又佔領了行政院，則更讓我感到憤怒。自以為代表正義的一幫憤青公然衝擊國家權力機關，癱瘓政府運作，還美名其曰為公民抗命，公民不服從。說什麼體制內能用的方法已經用盡，我怎麼沒見你們採取其他什麼行動，直接就去佔領了呢？作為一個民主社會，你想表達訴求的方式應當是多種多樣的，示威只不過是其中一種，而公然佔領國家權力機關已經不是單純的示威了，這已然違反了法律，任何國家都不應允許。試想如果今次讓他們得逞，那麼今後政府推行任何一項政策，只要不是對所有台灣人都是100%有利，只要某些競爭力低下的人的利益受到了所謂的損失，就去佔領立法院，佔領行政院，然後佔領總統府。。。由得這幫人胡來，國家還怎麼運作，社會還怎麼發展呢？稍有不滿意就站出來抗爭，說白了就是耍賴，就是不要臉。妥協精神也是民主自由精神中的一個重要的組成部分，很可惜這些經常把民主自由這種字眼掛在嘴邊的人根本不懂得什麼叫做民主和自由。口口聲聲說自己不是暴民，那麼請問，什麼才叫暴民？非要把立法院行政院燒掉，殺掉政府官員才叫暴民嗎？這都什麼年代了？！ 這也說明了台灣的公民教育還不到位，政府在這方面負有不可推卸的責任。民主也是要靠一整套規則來維持其運轉的，不是人多就說了算的，更何況你有沒有代表人民的大多數都還得打個問號！ 所以我支持台灣政府出動防暴警察進行強行清場，這些人已然成為暴民，已經完全脫離了正常表達訴求的軌道。 其實多數學生運動，都有一個通病，就是漫天要價，不知天高地厚。你說退回就退回，你說怎樣就怎樣，完全不考慮真要是這麼做了會帶來什麼樣的政治後果。你不懂兩岸是怎麼協商的，你不知道政府是怎麼運作的，怎麼進行決策的，你只不過是想當然而已，犯了重度中二病而已。我相信，就算不是馬英九，任何一個國家和地區的領導人都不會同意學生們的無理要求。 學生精力旺盛是年輕人的優勢，關心社會是民族有未來的基礎。但是所謂的關心社會絕對不是指你平時就知道吃喝玩樂打電動，一到這種時候就跟喝了雞血一樣在大街上暴跳吵鬧，你以為你是公義的化身，其實不過只是一介小丑罷了。 好想有點跑題，文中提及了易受煽動的原因，也簡單地講了一下我對學生運動的看法。觀點粗陋，還望諸位指正。","link":"/2014/03/26/answer1/"},{"title":"别梦依稀咒逝川，茕茕尤作痛心人──关于姥姥的回忆","text":"一 2022年3月27日晚11时30分，我的姥姥林秀芬于家中去世，享年84岁。 时至今日，每每想起姥姥的音容样貌，我的泪水仍旧止不住地向外涌动。这一切发生的太快，从最早的震惊、悲恸，再到之后的愤怒和坦然，我的情绪在过去几天几经起伏，泪水也早已在一通通视频电话中覆满脸庞，我不愿意相信，那个从小看着我长大，爱我疼我亲我的姥姥，真的离我而去了。 3月27日早上十点半，刚结束通宵值班的我拖着疲惫的身躯回家倒头便睡，准备浑浑噩噩地度过这一天。晚上六七点左右，我在半睡半醒中看到了母亲下午五点发给我的微信消息：“姥姥昨天进的ICU，原本准备三五天之后等炎症消除后做甲状腺结节的手术，今天姥姥说要回家，不治了，大家都一起去医院了。”当时的我，竟然一点都意识不到问题的严重性，居然没有马上打个视频电话过去问问情况。我天真地以为姥姥做了割开喉管的手术之后，因为年纪大最近一段时间可能不适宜做进一步的治疗，就先回家观察一段时间。我还想着今年清明节要不要请几天假回去看看姥姥，然后困意袭来继续昏睡。之后醒来我吃了晚饭，玩了玩电脑和手机便上床继续睡了，直到凌晨一点半我突然醒来，习惯性地打开手机一看，才看到母亲在零点半的时候发给我的短短四个字的微信消息：“姥姥没了”。 看到这四个字的那一刻，我的心跳仿佛停止了，随后身体开始不受控制的颤抖。我不敢相信这是真的，我也不知道独自一人居住的母亲在我这么长时间没有回复的情况下会做出什么，我赶忙打电话给母亲，但是怎么也打不通。我又想到四姨此时应该还在，我马上打了个视频电话过去，一接通便听到了四姨的哭声：“阳阳，姥姥不在了”。 原来姥姥真的走了，真的就这么快地离开了我们。 我刻意控制住自己颤抖的声音，简单问了下从去世到当前的情况，然后问了问母亲的情况。四姨跟我说她在收拾东西准备坐明天一早的飞机赶到太原。听罢我稍微放心了些，之后便草草地挂断了电话。我知道四姨此时还处在巨大的悲恸当中，我不应该在这个时候还来烦她。 打完电话，我连忙写了几句安慰的话发给母亲，劝她注意安全不要急躁，随后便开始查看深圳去往太原的火车和飞机票。东航MU5735坠机事件历历在目，我不想事后这么快便马上再坐飞机，但是深圳到太原根本没有直达的火车，更妄论高铁和动车了。心情烦躁的我马上开始查看飞机票，并结合清明节假期安排和可能的工作安排，最终决定3月30日坐飞机回太原。买完机票之后我马上再给母亲发消息，得知她刚才在收拾行李的时候我放心不少。她担心我回太原要隔离14天，我安慰她说我看了太原的防疫政策，持48小时核算结果就行。之后我们草草道了晚安，妻子在旁边担心地一直拉着我的手，此时已经凌晨两点半，我知道我该休息了，心烦意乱地闭上了眼睛，但是怎么也睡不着，脑海中翻来覆去都是姥姥住院时的身影。 一夜未眠。 28日我照常去上班，母亲告诉我她问了太原防疫办的人，我从深圳回太原的话是需要隔离14天的。她劝我说姥姥知道我孝顺，大姨三姨舅舅他们也说不用回去，心意到了就行。我怔怔地坐在工位上，堆满的工作已无心处理。草草结束一天的工作之后我赶忙回家给三姨打了视频电话，这才了解到姥姥自22号做了切开喉管的手术之后，身体状况一直未见好转，不仅无法说话连睁眼的力气都没有了。在辗转多个病房之后才于26号送到ICU，但此时为时已晚，肺部的感染已经漫延到了整个肺部，能够正常工作的肺泡已经所剩无几。到了27号姥姥的病情继续加重，此时她已经很清楚自己快不行了，她不想继续待在医院受罪，想在自己生命的最后时刻回到家中跟自己的儿女们在一起。但是考虑到医院防疫的要求几经波折，最终到了晚上十点才将姥姥接回家中。然而，任凭她的儿女们如何撕心裂肺地呼喊着姥姥，姥姥最终还是在晚上十一点左右撒手人寰，永远地离开了这个世界。 三姨讲述着姥姥住院以来的点点滴滴，还提到姥姥住院期间还曾讲起我小时候的事情。当提到姥姥说我从小一直都很乖，有一次老师布置的作业太多了我都还一直坚持写到晚上十二点还不愿意睡觉的时候，在手机屏幕前的我，早已泣不成声。 母亲希望我能为姥姥写篇文章，我明白她的意思，因为在2010年姥爷去世的时候我就曾写过一篇。她觉得我的文笔很好，姥姥的在天之灵一定会很欣慰的。但是母亲她不知道的是，经过八年社会染缸的洗礼，我已经从一个意气风发的青年变成了一个三十多岁，庸碌无为的油腻中年男人。许久不碰笔墨的我是否还能写出让自己满意的悼文，我回想起姥姥慈祥的面庞，泪眼婆娑地提起了笔。 二 我从小就跟姥姥的关系很好，在我上小学二年级的时候，父母便去到遥远的深圳艰难谋生。就像中国数以亿计的留守儿童一样，我被安置在姥姥姥爷家中，一年当中只有几天得以跟父母相见。我跟姥姥深厚的感情，也正是在那时培养起来的。可以说，姥姥是我儿时成长过程中，最最重要的人。 在我儿时的记忆中，姥姥一直都是个和蔼可亲的慈祥老人。她很宠孩子但是却不会惯着孩子，虽然不认识几个字但是却清楚地知道学习好的重要性。在跟姥姥姥爷一起生活的那段时光中，虽然我也经常跟村子里的小孩子们一起打闹玩耍，却始终没有放松过自己对学习的要求。就像前面曾经提到过的那样，有一次老师布置了非常多的作业，我一直写到晚上十二点才写完。姥姥心疼地不停地给我倒热水喝，她一边埋怨老师不该布置这么多的作业，一边又担心我这么长时间趴在桌子上做作业对眼睛不好。那时的我将老师的话奉为圣旨，任何要求都要一字不落地坚决执行，所以虽然右手酸痛不已，眼睛也快睁不开了，但是依然还是要把作业全部完成。虽然到了第二天我才知道班上大部分人都没有完成，老师或许也知道自己布置的太多所以并未责罚，但我依然还是觉得只要是老师布置了的作业，不管有多少都得完成才行。这样良好的学习习惯一直持续到我初到深圳的那一年，那一年我上小学四年级。在来深圳之前我对英语的了解只有26个英文字母还有像你好，早上好这样的简单词汇，而当我来到深圳的小学之后我才发现大家从一年级就开始学英语了。当时因为英语学习跟不上班上进度而急得直掉眼泪，好在父母请了家教之后我的英语水平有了很大提升，终于也得以跟班上同学“平起平坐”了。 因为姥姥不识字，我上小学时的听写任务便交给姥爷来帮忙。姥爷用方言念出的词语发音因为跟普通话发音不同，经常逗得我笑得合不拢嘴。比如尾巴他念成（yí）巴，颜色的“色”念成（shar）等等。有一次不知道怎么我惹姥爷生气了，姥爷把我的课本撕成了两半并大声训斥我，我一下子便吓哭了，随后他便出门去了。过会儿姥姥回到家看到我在哭，马上把我抱在怀里安慰我，我断断续续地跟姥姥说姥爷怎么怎么凶我，姥姥一边安慰我一边说着姥爷的坏话。过会儿姥爷又回来了，一进门就被姥姥大声训斥说怎么把我给弄哭了，连课本都给撕了，姥爷说我这不是去买胶水了么，姥姥说听写就听写么发什么火，这么乖的孩子你还有啥不满意的，后来又说了什么我已经不记得了，只记得我在姥姥的怀里很快止住了哭声。姥爷是个有点好面子的人，不过也许是看我哭得这么伤心也心软了，刚才不该对我这么凶，后来对我说话的口气也温和了不少。 小时候的我确实很乖，但该淘气的地方一点也没落下。有一次我在班上看到有个女同学的左手臂上套了一个黑色的袖套，我赶到非常的新奇。当老师点她起来回答问题的时候，和煦的阳光洒在她的左臂上时，她那个黑袖套在我的眼里分外地帅气。下课之后我赶忙找她问这个黑袖套的来历，她说她也不是很清楚是今天早上她妈妈要求她戴上的。我提出能不能让我戴一下试试，她说这个是直接缝到袖子上的是取不下来的。这个回答显然不能打消我的愿望，中午一回家我就吵着让姥姥给我做一个相同的袖套出来。姥姥一开始没弄明白我为什么想套个布做的圈套在胳膊上，后来一问颜色才知道原来我想做一个黑袖套套在胳膊上。姥姥马上训斥我，这是家里死了人才要戴的，这可不是给你瞎戴着玩的。我不死心后面又吵着要其他颜色的，姥姥没办法给了我一个绑头发用的红色橡皮筋，我喜滋滋地将它套在自己的左胳膊上。那天下午，我回答老师的问题特别积极，左手举的高高的。 不知道从什么时候开始，我沉迷上了打扑克。逢年过节乃至平日周末，总能见到大人们围在一起打牌的样子，扑克牌摔的老响，嘴里念叨着什么“枪毙”，“调主”，“贴了”之类的我听不懂的话，总觉得很有意思，但是看也看不懂。后来不知道谁教会了我“争上游”，我便老是缠着姥姥跟我玩“争上游”，我哥我弟来姥姥家玩的时候我们也经常一起打扑克，但更多的时候，只有姥姥陪我玩。姥姥手里牌一多就整理不过来，总是打到后面才发现某几张牌之前夹在其他牌中间没有看到。她打牌时的经典口头禅：“哎呀这可咋出啊，凑着对儿呢就出不了链儿，凑着链儿呢这对儿又拆开了。”总是逗得我笑得合不拢嘴。儿时的我总是嫌姥姥出牌慢，她出牌前总是要想一阵子，然后就像过去数粮票一样，用舌头舔舔手指，然后慢悠悠地“一张，两张，三张，四张…七八九十十一”一张张数过去，然后一起出。每次她出链子，我都会帮她看下有没有漏掉哪一张，到底出了多少张。儿时的我总觉得凭借自己的聪明才智赢下姥姥没有问题，我老笑话姥姥打牌老是输，但是偶尔我也会有翻车的时候，这时我就会耍赖，说刚才没看清手里的牌要求重来，姥姥也一般乐呵呵地就接受了。后来大了一点，我跟哥哥弟弟还有大人们一起打牌，他们就没有我姥姥那么好糊弄了，经常让我输得心服口服。这时姥姥一般就不参与了，怕因自己出牌慢导致我们玩的不尽兴，但是当没人愿意陪我玩的时候，姥姥也经常愿意继续陪我玩。 在我儿时的记忆中，姥姥的身体是很硬朗的。她经常带我去南社村赶集，然后往东走到窊流路，再绕到西线南街，最后走到家。有几次我走的累了不想走了，姥姥就哄我说再走两步就到了，我就真的再走了两步然后问她，那怎么还没到啊，我们俩就这样一边伴着嘴一边回了家，现在想来真的很有趣。西线街在过去有很多人摆摊卖菜，我也跟着姥姥姥爷卖过几次。别看姥姥字不认得几个，算账那可是算的又快又准，杆秤用起来也是得心应手，顺带着，我也学会了杆秤的使用方法。姥姥教我怎么用秤砣，怎么看重量，在没人买菜的时候我经常拿着杆秤一玩就是一下午。母亲跟我说过，姥姥年轻的时候可聪明能干了，要是有机会上学的话现在至少能上个大学。我回想起来卖菜的时候姥姥算账算的比我还快，心想确实如此。 在如今普国路的西侧，过去曾是一大片望不到头的田野（那时人们称之为“野地”），那是我儿时最喜欢的地方，基本上每天都至少会跑过去一趟。我在野地采过花椒，打过枣，摘过梨，甚至还跟其他小孩子一起野炊过。不过说到跟姥姥在一起的有关野地的回忆，我想一定少不了跟姥姥一起捡煤炭。那时横跨野地的有两条铁路，一条是载人的，而另一条则是运煤的。我还记得有一次我跟姥姥在运煤的铁路附近捡了好久的煤炭，不过与其说我是在“捡”煤炭，倒不如说我在那边玩还差不多。我还记得当时铁路两旁的泥土下面不知为何埋着很多盘子，碗之类的瓷器。那时的我直觉认为这些是文物，还想着找一个完整的挖出来拿去卖钱，结果找了半天都没有找到一个完整的。现在想来大概是因为这条铁路不光运煤，偶尔也运点别的，然后在火车行进过程中不小心从火车上摔下来的吧。后来我们不去铁路附近捡煤炭了，而是到一个工厂的墙根底下捡。我现在已经记不得那是个什么工厂了，只记得当时墙根底下煤炭特别多，每次我们都能满载而归。那时我已经学会了骑自行车，我就将装着捡来煤炭的布袋子放到自行车的车筐中，然后推着车跟姥姥一起步行回到家。像这样俭朴的生活习惯姥姥一直保持着直到去世。同那个时代的诸多农村老人一样，也许是长年累月的艰苦生活，不仅磨炼出了姥姥坚韧不拔的意志，也在这过程中总结出了不少宝贵的人生经验。像这样艰苦朴素的生活习惯，在现如今这个物欲横流的社会中，显得那么宝贵。而对于我们这些过惯了城市舒坦日子的年轻人来说，这种勤俭节约不铺张浪费的生活态度，至今依然值得我们去学习。 好像对很多八九十年代出生的人来说，方便面在他们儿时的记忆中仿佛是一种不可多得的人间美味，而干脆面则更是极品中的极品。现如今我已经不能理解自己儿时为什么那么喜欢吃方便面了（应该是山珍海味见得多了，已经瞧不上这种廉价食品了），但是我到现在依然还能够回忆起小时候吃到方便面时的快乐。我很早就知道方便面用锅煮着吃要比直接用开水泡要好吃的多，而在我儿时记忆中吃过的最好吃的两种方便面，一是前北屯的一家方便面馆，而另一个就是每天早上姥姥都会帮我做的加了鸡蛋的方便面。那时的我每天早上最期待的事情就是吃姥姥做的方便面了，一大碗配上鸡蛋的方便面我每次都会吃得精光，连汤都不剩下。至于说当时吃得是什么方便面，我印象中曾经吃过好几种，而记忆中觉得最好吃的非“大自然方便面”莫属了。现如今这个牌子的方便面估计早就没有了，而对于长大之后又吃了无数次方便面的我来说，却怎么也找不回那儿时姥姥亲手端给我的，那一碗热腾腾的方便面的味道了。 我还记得有一次，难得我们兄弟五人齐聚姥姥家，不知谁提议的让我们五兄弟一起按照出生顺序排排站拍张照片。往后许多年，这张照片经常被翻出来，感慨一下我们兄弟五人又长大了不少。我和我哥作为其中唯二的由姥姥亲手带大的孩子，总觉得自己要比其他弟弟要更被姥姥宠爱。姥姥也不只一次地说到，就我和我哥是她亲手带大的，再往后的带的就不多了，每次说到这里，我总觉得自己特别光荣。而一想到自己小时候跟我哥打闹，我一哭姥姥就搂着我训斥我哥，我想，或许在姥姥心里，我才是最受宠爱的那一个吧。 儿时关于姥姥的回忆，真的是说也说不完。 三 长大，真的是一瞬间的事，而这，往往也意味着离别的开始。自小学四年级开始，我被父母接到深圳居住之后，便不常回太原了，电话也打得少了。我想，看着自己亲手带大的孩子离开自己，姥姥心里应该也是有点失落的吧。现在想想我也挺后悔的，当时怎么不多给姥姥打打电话，多回去看看姥姥，她该多想我啊。 除了我上小学时父母曾把姥姥姥爷短暂地接到深圳住过一段时间，以及我高考结束后在太原待的两个多月，我跟姥姥再也没有像我儿时那样，长时间住在一起的回忆了。那时我一年可能就给姥姥打过几次电话，然后隔几年才会一趟太原。虽然联系的不多，但是每次姥姥都很高兴。她的耳朵渐渐不行了，听不清我说的是什么，只是乐呵呵地跟我说太原现在又热了冷了，下雨了下雪了，现在吃得可好了，每天除了吃就是睡，除了睡就是吃，然后嘱咐我好好上大学，找个好工作。工作以后又担心我太劳累对身体不好，要注意好身体，不要太辛苦，多休息，多出去转转。即使已经过去了这么多年，即使我们的距离是如此的遥远，隔着手机屏幕的我依然能够感受到姥姥对我的关心和爱护。 姥姥晕车，在车上待的时间长了就晕的不行，就想吐，所以除了我小时候她跟我姥爷去过一次深圳之后，就一直待在太原没怎么出过远门。高考结束之后我在太原的那段时间，因为马上要上大学了但是还没有见过大学长什么样子，于是便提议去我哥大学里逛逛。姥姥一开始不太想去，但是看着我软磨硬泡一个劲儿地劝她一起去，姥姥最终也应允了，真的陪着我一起去了我哥的大学。我哥大学里有座不高的山，我马上提出要上山看看，但是姥姥走不动了，刚才坐车也有点晕，我大姨便陪着她在山脚下休息，等我们下山回来。后来四姨跟我说，姥姥是看在我的面子上才同意去的。听罢我有点心疼姥姥，又有点高兴，原来我在姥姥心目中居然有这么重的份量。 后来我给母亲在惠州买了房，一度也想把姥姥接过去住一段时间，好不容易说服姥姥同意了，结果航空公司因为觉得姥姥年纪太大了有风险不愿意接待，这件事也就作罢了。 在我毕业工作两三年之后我回过一次太原，那时姥姥的头发基本上已经全白了，脸上的老年斑也比我儿时记忆中的要多不少。她说她现在腿不行了，走不动道，腿上浮肿的厉害，站起坐下都很费劲。“一按一个坑，等半天才恢复”她自嘲到，还给我现场演示了一下，结果按下去之后真的好久都没有恢复。“老啦，啥也干不了了，每天除了吃就是睡，还得天天吃药。”我看在眼里，听在心里，感到有些难过，但是又毫无办法。大概这就是名为时间的魔咒吧，让我从一个小时候老缠着姥姥撒娇的小孩，长大成为一个已经能够赚钱养活自己的大小伙子；也让姥姥的身体从原先哄我走两步就到家了的硬朗，到现在走几步就喘的不行的孱弱。 那次回太原姥姥很高兴，给我讲了很多这附近从我走的时候到现在的各种翻天覆地的变化。过去的平房没有了，都变成了各种高层住宅楼。曾经的“野地”也不复存在了，也基本上都盖成楼房了。她说她原先经常去三处（中铁十二局集团第三工程有限公司）锻炼身体，现在走不动了也就不怎么去了。说着她问我想吃点啥好吃的，我说就尝尝小时候吃过的炒土豆丝吧，姥姥笑着说，从小你别的啥也不爱吃，就爱吃个土豆丝，真好养活。她说西线街上有几家卖肉的店，我们去买点肉，然后等大姨、三姨他们过来帮忙做饭。我说我去买肉就行了，姥姥说没事，正好跟我一起出去转转。见姥姥执意要一起去，我便也没再坚持。 肉店离家并不是很远，但是因为姥姥年纪大了我们走起来很慢。我担忧地看着姥姥步履蹒跚地走在街道上，想着随时扶着她防止她摔倒。走了七八分钟我们终于来到了她说的那家肉店，但是想买的肉已经没有了，我们便准备返程。她说她现在真的是走不动道了，才走这么点距离就喘的不行。我说我们赶快回家歇息一下吧，以后姥姥你就别走这么远的路了。后来我们在离家不远的一家肉店买到了肉，之后就回家了。 这是我记忆中，最后一次陪姥姥出门溜达，后面她就基本上只在家门口跟几个老太太坐着一起聊聊天什么的，再也不往更远的地方走了。我回想起那次跟姥姥一起买肉，只走到西线街岔路口那块就没有继续往前走了。想到小时候我还需要姥姥哄着才愿意走那么一大圈，而现在姥姥连一条街都没法走完全程了，我的鼻子突然感觉有点酸。 姥爷去世之后，姥姥很快从巨大的悲伤中走了出来，但是我知道在她心里，依然十分怀念着姥爷。为数不多地几次回去探望过程中，我见到过姥姥一个人坐在姥爷的遗像面前，嘴里念叨着一些最近发生的事。我没有去打扰她，我知道她需要一些和姥爷独处的时间。现如今儿女的儿女们都陆续长大了，陪伴她一生的姥爷也先她一步离开了这个世界，虽然她嘴上总说着“不用管我”，“我现在过的可好了”之类的话，但是我知道，那写在眼里的落寞是骗不了人的。 在我待在太原为数不多的日子里，我跟姥姥说话的次数也渐渐变少了，她耳朵不行了，也听不太懂我跟周围人的交流内容，只是说道我现在的工作的时候，姥姥偶尔会插一句：“工资倒是挺高的，但是太辛苦了。”或许姥姥回想起了我小时候我们之间无话不聊的那种温馨氛围，但是面对现如今两人的相对无言，姥姥大概也是有些落寞的。她明白孩子长大了就是要离她而去的，她也明白她已经远远地被这个社会抛在了身后，再也理解不了我们这些年轻人所谈论的事物了。不过我还清楚地记得，有一次姥姥拿出了她的账本给我看，上面密密麻麻地记录着她卖每天收集过来的废纸箱子赚来的钱。她从很早就开始每天坚持收集纸箱子，攒够一定数量了就卖到废品站去，一年能赚好几百块钱。后来她渐渐地走不动道了，就让我大姨，三姨还有委托附近的街坊邻居路上碰到了纸箱子就拿过来。母亲回去看她的时候，也帮她收集了好多次废纸箱子。虽然这些废纸箱子摆在家里很占地方，我们也都不需要姥姥赚来的这点钱，但是我们都理解姥姥，反正闲着也是闲着，像这样找点事情做也挺好的。我想姥姥之所以这么看重收集纸箱子这件事，除了能赚点钱以外，最主要的还是想证明自己还是有点用处的吧。她特意拿给我看，也是因为很看重我的态度吧。我夸了夸姥姥，姥姥很开心。 我想，虽然姥姥嘴上没有明说，但是我知道在平时的生活里，她是很孤独的。她一直跟舅舅生活在一起，但是舅舅经常一上班就很长时间见不到人。我弟弟也是，上学的时候就老是出去跟朋友玩，一出门就直到很晚才回家，后来上班之后回来的就更少了。先前大姨和三姨经常上门来照顾姥姥，给姥姥做饭，后来大姨的孙子出生之后，过来走动的次数也少了。每年过年，除夕夜和初一基本上都是她跟舅舅还有我弟弟一起过，偶尔我跟母亲回去了也陪着她一起。 有一次姥姥突然很生气，她突然说她对她生的所有孩子都不满意。事情的缘由我已经不记得了，但是我想一定是因为她的儿女们现在都有了自己的家庭和孩子需要照顾，陪伴她的时间就变少了。现在姥爷也不在了，没有人再能够一直陪着她一起生活了。这些我都很清楚，但是我更清楚的是，我什么也做不了，什么也改变不了。姥姥也都明白这些道理，她都知道，但是她当时也许真的是委屈到受不了了吧。姥爷已经离开那么多年了，这么长的时间，姥姥一个人是怎么过来的呢，我不敢想。 每次到了我要返程的时候，姥姥总是有些舍不得。每次她都会做好饺子，然后让我吃几个饺子再走。我知道姥姥对我的不舍，所以我每次都乖乖地吃掉。后来又不知从哪次开始，我在最后离开姥姥家之前，会拥抱姥姥一下，抱着她孱弱身躯的那一刻，我的鼻子总是会一酸，眼泪差点就要掉下来。我总是会轻轻地拍拍姥姥的背，然后偷偷地抹掉眼泪，最后跟姥姥道别。 后来我开始筹备结婚的事情了，回太原的次数变多了，姥姥还朝我打趣道，“还好娶的是个太原老婆，要是娶个外地的，那真不知道几年才能见一次了。”每次听完，我总是会有点脸红。 但是让我做梦都没有想到的，在我20年办完婚礼那次之后，我就再也没有回到过太原。因为疫情还有工作的原因，每次我都抽不出时间回去。姥姥也知道我很忙，所以每次视频电话的时候总是不停地嘱咐我要好好吃饭，好好休息，别累着，有空了再回去看她。我也总是应承下来，心里想着以后还有机会的。 姥姥去年的时候住了一次院，当时查出来是肺部上的问题，后来没住多久就出院了。我当时也没有多想，就是觉得人老了肺部出问题是很正常的，脏东西吸进去之后又没地方排出来，所以老了有点问题也是正常的。期间跟姥姥的几次视频电话，除了感觉姥姥有点憔悴还有瘦了点以外，我也没看出其他异样。后来说要去医院复查也没有去，现在想想我们真的都太大意了。 今年过年之后，姥姥的病情不仅没有好转，还有逐渐加重的迹象。在姥姥实在难受的不行的某一天，舅舅他们把姥姥送到了比之前好一点的医院，这次才终于发现姥姥的甲状腺上长了一个肿瘤，压迫到了气管，导致姥姥喘不上来气。如果不及时处理，这个肿瘤很可能会越来越大，最后将整个气管填满。但是要治疗的话，姥姥都这么大岁数了，做任何手术都有极高的风险。医生给出了三种解决方案： 1. 气管上支架，治标不治本，会有很强烈的异物感，而且上的支架可能会移动，并且肿瘤还会继续长大 2. 化疗，时间长，效果慢，影响胃口，最主要的是人太受罪 3. 手术切除，有风险，但顺利的话可以根治 最终我们选择了手术方案，具体来说就是给姥姥进行一个局部麻醉，然后将放射性粒子通过针管注射到姥姥的肿瘤当中看能否消肿。但是如果要这么做的话，需要将姥姥的喉咙切开，接上喉管来进行呼吸。从医生的表述来看，这个方案似乎已经是目前能够想到的最佳方案了。 姥姥的手术最终安排在3月22日，并且只进行切开喉管的手术，注射放射性粒子要再根据姥姥的病情发展决定。我们都认为这只是个小手术，姥姥很快就能恢复。我们都没有想到，从那天起，死神的镰刀跟姥姥之间的距离陡然缩短！ 姥姥做完这次手术之后，已经说不出来话了，饭也吃不进去。期间辗转几次病房，病情都不见好转。最终听医生的住进了ICU，原本打算等炎症消除了再进行注射治疗，结果没想到住到ICU的隔天，姥姥就永远地离开了我们。 得知噩耗之后，母亲马上改签了机票想用最快的速度再见姥姥一面，我也想回去但是奈何太原疫情政策太严厉，即使回去也见不到姥姥，我只能含泪放弃。之后的几天里我跟三姨还有四姨都通了电话，想了解清楚姥姥从病危到去世的整个过程，然后让自己的泪水一遍遍地流过自己的脸庞。当母亲通过视频电话将家里姥姥的遗像和供桌拍给我的时候，我忍不住再次流泪了，我知道，那个最爱我，最疼我，一手拉扯我长大，我最亲爱的姥姥，真的永远地离开我们了。 姥姥31号一早出殡，火化后便会跟姥爷合葬在圪僚沟公共墓地。我迫不及待地想见到姥姥最后一面，但是因为殡仪馆不允许拍照，我最后的愿望也落空了。往后余生，我只能在姥姥的坟前哭泣，追忆跟姥姥在一起的点点滴滴了。 三姨跟我说，周围邻居都说姥姥这是喜丧，走的时候儿女们基本都在身边，都很孝顺，姥姥走的也快，没有遭太久的罪…我只是一边点着头一边忍不住地流泪。我想起姥姥有一次跟我说，那时姥爷刚走不到一年，她说她梦见姥爷对着她笑，但是什么话也没有说，说完姥姥就流泪了。我知道，这是因为姥爷刚走没多久，姥姥还没有从悲痛中完全走出来。 十二年之后，我的姥姥终于可以和姥爷团聚了。 也许在今后某个难眠的夜晚，姥姥姥爷会同时出现在我的梦中，同样笑着但是一言不发。到那时，我一定会笑着祝福他们在另一个世界生活美满。你们将我一手带大的恩情我今生都永难回报，我想我唯一能做的，就是认真、努力地生活在这个世界上，让你们不必为我操心和担忧。同时，我也会在心里，永远地纪念着你们。 如同野夫在《尘世·挽歌》中怀念她去世的外婆时所写的那样： 但死亡又确实如同一张有去无回的单程车票，没有人能真正告诉我彼岸的消息。那些先我而去的亲友都像失信的人，他们饮过忘川之水后，或者都已经记不得我们这些被落下的孩子，使得偶尔的托梦也变得那么难以置信。这个世界有无数种宗教教导我们怎样去认识死亡，如果没有一种给我承诺──我还有机会与我的亲友劫后重逢，那它即使许给我一切功名利禄，于我又有何用？ 坟灯──关于外婆的回忆点滴 生老病死，是每个人都必将经历的。我知道在我的生命中，我还会经历多次死亡，其中也包括我自己的。我只是希望，如果真的有彼岸，真的有来世，我希望届时我能够有机会，再见一次姥姥姥爷，见所有我想见的人，跟他们说，我很努力地活过了，我没有辜负你们的期待，还有，我很想你们…","link":"/2022/03/30/ji-nian-wo-de-laolao/"},{"title":"《Python核心編程》筆記（一）","text":"大致地將《Python核心編程》的第一部分看完了，今後我將把在看這本書的過程中所記的一些筆記錄入於此，方便我以及其他有需要的朋友進行查閱。 ** 注：本書為第二版，其中python的代碼主要為2.x版本，使用python3.x的朋友請留意。** 一些雜七雜八的小知識 enumerate函數 代碼示例： 123foo = 'abc'for i,ch in enumerate(foo): print ch,'(%d)' % i 輸出： 123a(0)b(1)c(2) python通過引用調用，這意味著函數內對參數的改變會影響到原始對象。不過事實上只有可變對象會受到此影響，對於不可變對象來說，它的行為類似於按值調用。 **–init–()**是在對象創建之後執行的第一個方法，它並不創建實例，只是負責在創建之後做一些初始化工作。 賦值並不是直接將一個值賦給一個變量，而是將對象（即值）的引用賦值給變量。並且賦值語句沒有返回值。 交換兩值的技巧 代碼示例： 123x,y = 1,2x,y = y,x#y = 1,x = 2 所有的模塊都有能力來執行其自身的代碼，最高級別的python語句–那些沒有縮進的代碼行在模塊被導入時就會被執行，而不管是否真的需要去執行。所以除了主程序模塊，其他模塊中的代碼最好都封裝到函數或類中。 python解釋器在查找全局變量之前，總是先查找本地變量。因此有如下技巧： 將經常用到的模塊屬性替換為一個本地引用，可以使得代碼的執行效率得到提高。 如：ls = os.linesep（不同環境下的行終止符） 通過id函數可以獲得對象的內存地址，用法：a = 2 id(a) 下列對象的布爾值為False： None False(布爾類型) 所有值為零的數 0.0 0.0 + 0.0j “” [] () {} foo1 = foo2 = 4.3與foo1 = 4.3 foo2 = foo1都表示foo1和foo2均指向一個值為4.3的對象，然而：foo1 = 4.3 foo2 = 1.3 + 3.0這時foo1和foo2指向不同的對象。 引用計數每個對象天生有一個計數器，記錄它自己的引用次數，即表示有多少個變量指向該對象。python提供is 和 is not 來測試兩個變量是否指向同一個對象。 整數對象和字符串對象均為不可變對象，所以python會很高效地緩存它們。這會造成我們認為python應該創建新對象時，它卻並沒有創建新對象：代碼示例如下： 1234567a = 1b = 1#id(a) == id(b)a = 1.0b = 1.0#id(a) != id(b) python僅緩存簡單整數，如(-1，100)，此範圍是會變的。另外，被緩存的字符串當無任何引用指向它時，該字符串將不會被緩存。 cmp(obj1,obj2)小於0，則obj1 &lt; obj2;大於0，則obj1 &gt; obj2；等於0，則obj1 == obj2；若要比較用戶自定義的對象，cmp函數會調用該類的特殊方法–cmp–()。 repr(obj)返回obj值的字符串表示，如：a = 2 repr(a) == ‘2’ b = ‘f’ repr(b) == “‘f’”。 類型判斷用諸如type(a) is int這樣的語句對變量進行類型判斷，執行效率較高。 **isinstance(x,(int,float,…))**若該對象的類型在元組中，則函數返回True Python3實現了真正的除法，即1 / 2 = 0.5而不是0，傳統除法(被稱為地板除)的運算符為”//“，如：1 // 2 = 0，1.0 // 2.0 = 0.0，1.0 // 3.0 = 0.0 運算符**比左側的一元運算符優先級高，比右側的一元運算符優先級低。如：-3 ** 2 = -9,4.0 ** -1.0 = 0.25 Python3中，二進制數前綴為0b，0b10 = 2；八進制前綴：0o；十六進制前綴：0x divmod()返回商和餘數的元組，oct(8) = 10;hex(16) = 10（oct函數轉十進制數到八進制，hex函數轉十六進制） ascii轉換函數chr(97) = ‘a’ ord(‘a’) = 97 （意思明確，就不解釋了…） random模塊 randint() 需要兩個整型參數，返回兩者之間的隨機整型 randrange() 返回range(start, stop[, step])序列中的一個整型數 uniform() 和randint()差不多，只不過返回兩者之間的浮點型（不包括範圍上限） random() 返回0.0至1.0之間的一個浮點數 choice() 隨機返回給定序列中的一個元素 鏈接操作符”+”可實現將兩個序列的內容合併，但效率不高，推薦的做法是：對於字符串，不如將所有的子字符串放到一個列表或可迭代的對象中，然後調用一個join方法來把所有內容連接到一起，從而節約內存，相關代碼如下： 123a = ['h','e','l','l','o']b = ''.join(a)print(b) =&gt; 'hello' split()與join()相反，它根據設定的分隔符將字符串分拆，相關代碼如下： 1234b = 'my..name..is..bob'b.split('..') =&gt; ['my','name','is','bob']b.split('..',2) =&gt; ['my','name','is..bob']#其中上述代碼中的2若為-1,-2,-3...，則與沒有無異 對於列表，append()用於向列表尾部添加一個新元素（該元素可為字符串，列表和元組），而extend()函數則是將一個新列表添加到原列表中，相關代碼如下： 123a = [1,2]a.extend([3,4])a =&gt; [1,2,3,4] [None]可使用”+”但不可使用extend() for–elseelse只在for循環完整結束，沒遇到break的時候執行 ‘%s %s’ % (‘Spanish’,’Inquistion’) =&gt; ‘Spanish Inquistion’不過如下方法更好，因為更節約內存：a = ‘a’ ‘b’ =&gt; ‘ab’（注：’a’和’b’之間有空格都沒所謂） map,filter,reduce map(func, seq[, seq]) -&gt; list 對seq中的item依次調用func，結果輸出為list。當傳入的參數為單個列表時，其原理圖如下： 當傳入的參數為多個列表時，map會並行迭代每個序列，具體來說，就是第一次調用時，map會將每個序列的第一個元素捆綁到一個元組中，將func函數作用到map上，當map已經完成執行的時候，將元組的結果返回至map要返回的列表中，且作為第一個元素。其原理圖如下： reduce(func, seq[, initial]) -&gt; value reduce的參數為一個二元函數，一個序列和一個可選的初始化器，它的工作方式是（在沒有初始化器的情況下）取出序列的頭兩個元素，將它們傳入二元函數來獲得一個值，然後再用這個值與序列中的下一個元素傳入二元函數再獲得另外一個值。重複這一過程直到整個序列都被遍歷完畢。 當初始化器存在的時候，則只取出序列中的頭一個元素，然後和初始化器一起傳入到二元函數中，然後再重複這一過程，其原理圖如下所示： filter(func or None, seq) -&gt; list, tuple or string filter函數的參數中的func應為一個布爾函數，filter會依次為序列中的每個元素調用func，然後將所有返回值為真的元素添加到一個序列中，其原理圖如下： 字符串模板 代碼示例： 12345from string import Templates = Template('There are ${howmany} ${lang} Quotation Symbols')print(s.substitute(lang = 'python', howmany = 3))#輸出There are 3 python Quotation Symbols.#注：substitute函數的參數如果少了一個關鍵字參數，則會報錯，而若用safe_substitute(),則不會報錯，但會輸出原字符串。 zip() 代碼示例： 123s, t = 'foa', 'obr'zip(s, t)=&gt; [('f','o'),('o','b'),('a','r')] 字符串排序使用字典序，而不是字母序。(‘T’ &lt; ‘a’) list.sort()與sorted()之區別：前者直接修改原列表，無返回值；後者創建新列表，原列表不變。 元組對象本身不可變，但元組中包含的可變對象中的元素可變。如：元組中有一個列表，則列表中元素即可改變。 所有的多對象，逗號分隔的，沒有明確使用符號定義的，這些集合的默認類型都為元組，舉例如下： 124, 2 &lt; 3, 5 #(4, True, 5)(4, 2) &lt; (3, 5) #False 淺拷貝和深拷貝由copy模塊提供。(自己翻書去吧…) 第一次的筆記比較混亂，因為我是按照書中章節來閱讀，然後從中截取一些我不太熟悉的知識點所造成的。之後的筆記相對來說會比較有條理一些，因為知識點相對集中一些。","link":"/2014/03/13/python-course-1/"},{"title":"缅怀姥爷：一位我最最敬爱的老人","text":"注：这是一篇旧文，写于2010年。 2010年8月22日，原本是极为普通的一天，没想到竟成为了我最敬爱的姥爷的忌日。 噩耗是在今天上午12时得知的，当时的我完全无法相信。我无法相信，这位在我回老家的这20多天里，陪我打牌，陪我喝酒，陪我聊天，陪我回顾中国历史，陪我大谈国家乃至世界大事的老人竟会去的如此的突然。我无法相信，这位四天前还在电话里精神饱满地跟我打电话的老人，竟然就这样永远地离开了我…… 听着母亲在电话中带着哭音的话语，泪水渐渐地模糊了我的双眼。我知道这是真的了，这不是一个拙劣的玩笑，我敬爱的姥爷真的就这样离开了人世。姥爷，您为何去的如此的匆忙？您为何离开的如此的突然？您知道吗？我好想再次回去好好地看看您，好想再次回去好好地陪陪您。还有好多的事情我没有陪您一起去做，还有好多我想对您说的话没有来得及说出口。姥爷，您怎么可以就这样永远地离开了我们？您怎么忍心就这样抛下这么多的儿女子孙，抛下我这个如此敬爱您的外甥？您不该就这样离开我们，与其他老人相比，您还太过年轻，您还没有过过真正的好日子，您怎么可以…… 我好不甘心，操劳了大半辈子，在人生最后的日子里还没享受到几年真正的清福，就这样突然离去，撒手人寰…… 我好不甘心，在这个世界上有那么多的百岁老人，而您才76岁，怎么就会先他们一步，永远地离开了这个世界呢？ 我好不甘心，在回老家的这20多天里，我为什么不多陪陪您，多陪您聊聊天，多陪您遛遛弯儿，多陪您一起打打牌，多陪您一起大谈国事，天下事，一起畅想那未知的未来。直到您真的离开了我，我才发现，原来还有好多的事，想跟您一起分享，想跟您一起去做。可是，一切已经太迟了，纵然有再多的眼泪，也换不回来您，换不回来那个有些顽固却又有些可爱的老人…… 我好不甘心，不就是今天早上像以往那样一个人单独出门了吗？不就是像往常一样和邻居街坊里的其他老人一起打牌吗？怎么就突然出事了？怎么就突然不行了？看着您那虽然消瘦却依显硬朗的身子骨，有谁会担心让您一个人出门会遭意外呢？在我回去和您一起生活的这20多天里，您看上去是那么的健康，一般老人的身体上所有的毛病在您身上似乎完全找不到踪影。表面的假象完完全全地将我，和您的众多儿女们骗了过去，我相信您绝对不是在欺骗我们，因为我在您的身上，完全看到了一位老人对自己能够活到100岁的自信和决心。是啊，您还有好多地方没有去过，您还有好多清福没来得及去慢慢享受。记得您生前曾经说过，您想找个时间再来深圳住上几个月，可是因为深圳恶劣的天气，家里的一些原因，更重要的是担心您那日益年迈的身躯承受不住长途的颠簸，因而迟迟没有定下让您过来的日期。可这并不表示您真的就不能来，只是现在，一切已经太迟了…… 一定是当时和您一起打牌的那些老人手头没有电话，打120时耽搁了时间，一定是因为住的比较偏僻，120来的太不及时。否则，您怎么会这么突然地离开我们，否则，您在临走之前，怎么会没有亲人陪伴在您的身边？如果您住在城里，这种情况绝对不会发生，您也绝对不会走得如此突然，如此匆忙。是我们的错，没能让您过上好日子，没能让您过上幸福的生活…… 如果您能来深圳，我一定会在生活上好好地照顾您。绝对不会由着您，像今年春天的时候那样，村里组织老人体检，你却因怕麻烦而怎么也不愿意去。我一定会定时将您送去医院做全方位仔细的检查，将您身上的隐疾一个一个地彻底清除，让您笑口常开地活到100岁，笑看中国这100年来翻天覆地的巨大变化。 我好不甘心，真的……好不甘心。 但是事到如今，说这些屁话还能有什么用呢？ 母亲已经订好了今天的机票飞回太原，我却因为准备上大学而无法离开深圳。姥爷，您这个不肖的外甥不能回去看您了！不能回去握住您的手，看您最后一面，送您最后一程了……姥爷，我对不起您…… 已经有多少年没有哭过了？也许是自爸妈离婚之后，我再也没有掉过一滴眼泪。本以为自己已经长大，已经能够承受住一切打击。却没有想到，当得知您去世的消息的时候，我哭了，哭的如此的伤心。您要是知道了我现在的这副模样，一定会笑话我的吧？一定会摸着我的头，笑着责备我说：“傻小子，哭什么呢？有什么好哭的？”已经有多少年没有听过您的训话了？已经有多少年没有细细品味过您那不厌其烦地谆谆教诲了？姥爷，都说您曾经非常的严厉。可是几天前回去看您，您是那么的和蔼。其实，我多么想让您再严厉地训我一回，因为身为您的外甥，我做的很不够，远远不够。 您一共有4个外甥，1个孙子。我知道，虽然同为外甥，但我是不同的。因为您是看着我长大的，因为我曾经跟您在一起生活过好几年。在您看我的目光里，我总能够感受到您对我的慈爱，以及对我长大了的欣慰。我知道，您对我那血浓于水的关心和爱护，绝对不比您对您的孙子的爱要少，而这，正是我如此地尊敬您，如此的爱您，眷恋您的原因。 记得我上小学一、二年纪的时候，您骑着自行车送我上下学。满头白发的您骑着自行车每天准时地送我上学，接我放学，风雨无阻。上学的路遥远而崎岖，记得当年上学路上曾经有过一段又陡又长的大斜坡，每次您费力地骑车上去之后，总是会气喘吁吁的好一会儿。随着我年龄的增大，体重也在逐年地增加。有一次送我上学，骑到那个斜坡的正中央的时候，您突然骑不动了。我怕您累着急得想要下车，可是您却倔强地不允许我这么做，硬是咬着牙骑车带着我，将我成功地送了上去。好不容易上去之后，您笑呵呵地对我说：“怎么样，姥爷厉害吧？”我已经不记得当时我说了什么话，只是当时的感觉我还清楚地记得。有些心疼，心里面却又非常的甜。后来您终于再也带不动我了，我也就在那时学会而骑自行车，往后便是由我三姨跟我一道去上学，但是您送我上学的那几年，我一辈子都无法忘记。 我小的时候，您对我的学习情况极为关心。每次开家长会都是您来参加。有时候因为淘气在学校里表现不好，您听过老师对我学习的情况介绍之后，回到家中总是会非常严厉地斥责我，但是在把我训哭之后您又总是会过来安慰我。其实您完全不必对我这么好，我在学校里表现不好，您训我是理所当然的事情，我一点都不会怨您，甚至如果您狠狠地打我一顿，甚至您因为错怪我而对我发火，我也愿意去承受。谁说您脾气暴躁，谁说您生气起来顽固不讲理？您对我太好，甚至比对您的孙子还要好。 当年和您在一起生活的点点滴滴还有很多，这些我都深刻地记在自己的脑海里。您对我的关心，您对我的爱护，您对我的呵斥，您对我的教诲。这些，我都不会忘记，永远也不会忘记，因为这些是您，是一位老人，从70多年来的漫长岁月中所提炼出来的人生的精髓和真谛。我无法接受任何对您这些想法和观点的任何不好的评价，说您思想落后，说您跟不上时代，这些统统都是无聊至极的屁话。在我今后的人生道路上，您曾经教给我的那些东西，我死也不会忘记！ 将近一个月之前，也就是2010年7月24号那天，我终于在上次回去看您的五年之后，再次回到了您的身边。高考结束，漫长的假期，我终于有了时间来看您，和您一起分享我高考结束后的喜悦，和您一起去细细地回忆过去在一起时的点点滴滴。下了出租车之后，远远地，便看到了您。比以前更加消瘦的身躯，精神却比以前好了不少。将满头的白发剔去，笑呵呵地欢迎着我的到来。我不知道我应该用什么言语来表达我当时的心情，高兴，喜悦，还有看到您日益年迈的身体的心疼……您过来说要帮我提东西，我连忙推辞，怎么能够再度允许您去受累？还好，您没有坚持。 和您在一起生活在这20多天，简单而幸福。刚到的那一天，刚学会喝酒的我拿起倒的慢慢的一碗啤酒跟您碰杯。本担心您年纪大了，喝酒伤身。却看您一饮而尽，面色不改，后来又得知您还能喝白酒，酒量不错而且身体一直很棒，没有出过任何问题，我便也心安下来，和您一起喝酒，拉家常，这么多亲人在一起吃一顿团圆饭，和乐融融，我的心也暖暖的。 您后来给我看了您那因为类风湿性关节炎而变形的双手，然后告诉我这双手使不上劲，握力不行。当时看了那双苍老而形状有些怪异的手，心里有着一种说不出的难受。我还记得您当年得类风湿病那会儿，疼得非常厉害，几乎下不了床，吃了好多药都没有用。可是当您得知村里要通自来水，组织全村的人一起挖渠通管道的时候，您不顾家人的阻拦，硬是用着这双疼得厉害的手，拿起沉重的铁铲，去挖渠。当时的我，除了心疼，除了流泪，什么也做不了。现在，您的这双手早已不再疼痛，却变形成了这副模样，和当年一样，除了心疼，除了让泪水将自己的视线模糊，我依然，什么也做不了…… 您喜欢安静，不喜欢人多的地方，因此很少出远门，甚至不经常出门，走出您所居住的那间卧室。我们在客厅看电视，您总是躺在床上拿着一本书静静地读着。您很爱看书，这我知道，而这也是您虽然过去只读过几年小学，现今的学识却依然渊博的原因。谈起历史，谈起国家乃至全世界的大事，您分析得头头是道，而且言之有物，很有见地。有一次我去书店买了一本《狼图腾》，书中某一段文言文中的某一个短句，我不知道是什么意思。抱着试试看的心态，我问了您，没想到您竟然能迅速地告诉我这句话是什么意思，这无疑让我这个刚念完高中准备上大学的人感到汗颜，同时也再次对您的学识渊博，有了更深层次的理解和认识。 您读书很仔细，书中有了任何错字，您都会用笔将其圈出，然后用工整的正楷将正确的字标注在旁边。我还记得当初有一年您在看一份报纸，看完之后抱怨这份报纸上怎么有这么多的错别字。我拿来一看，结果发现您在密密麻麻的字眼中，准确无误地挑出了23个错别字。您那读书一丝不苟的精神，真的很令人钦佩，令人肃然起敬。 您读书不光是读，还对书中提到的东西有着自己独到的见解，您不会被书的作者牵着鼻子走，而是坚持着自己的观点。有一次，您拿着一本百家讲坛的杂志对我说：“易中天这个人我不喜欢，他讲的那些东西我并不认同。”然后告诉我他品三国里面有哪些什么什么问题。我不是历史学家，对历史不太熟悉，因此也不知道您说的是否正确。但无论如何，您这种精神，的确值得我们这些年轻人去借鉴，去学习。 小表弟们淘气，爱闹腾，因此经常惹您生气。我知道他们还小，不懂事。可是当我看到您因为他们而生气的时候，我真的很想替您好好地揍他们一顿。您的那个孙子好吃懒做，学习一点也不用功，辅导他学习真的令我有一种恨铁不成钢的感觉。还好您开明了不少，经常对我说您懒得管他，他爱怎么样就怎么样。可是我知道，您绝对不是真的不关心他，因为有一次您出门回来，当他甜甜地叫了您一声“爷爷！”的时候，我分明看到了您那高兴的笑容。 您很喜欢跟我谈历史，有时候说出来的一些人名我都闻所未闻。不过有时候，你所说的历史跟我学过的不太一样。我知道这是因为您没有受到过多少正规的教育，您看过的那些历史书，都是些野史演义。不过这些丝毫不会影响到我对您学识渊博的评价。我知道并相信您本来可以成为真正的大家，只是因为您小时候并没有太多的接受正统教育的机会。 有时候问您一些历史问题，您却跟我说其他东西。我知道您的耳朵有点背，听的不是很清楚，可是偶尔也会感到很奇怪，听错本身并不奇怪，但是有时候好像也错的太离谱了点。后来问过三姨之后我才明白，原来是因为您不懂我所提出来的问题，但是因为面子上的缘故不好意思说出来，因此才突兀地说起其他的东西。我当时听了会心一笑，原来您还有这么可爱的一面。 您很喜欢打牌，怎奈我玩“拖拉机”的水平实在太低，您便勉为其难地陪我和表弟们玩起“争上游”来。您的水平很高，很少输，不过有时候打输了，我能看出来您有些不太高兴。因此偶尔也会放水，然后笑着点着头听您跟我说我刚才的打牌方式有哪些需要改进的地方。您是一个有点爱面子的人，我并不认为这是您为数不多的缺点之一。作为子孙后代，我们这帮臭小子就是应该极力地去维护老人的面子，这是很自然的事情。他们年纪大了，思维速度跟不上我们这些年轻人了，玩的时候自然需要让着他们一点。而且，您有着那么多优秀的品质，这点小问题，又算得了什么呢？ 您是一位不愿意服老的老人。跟您出门去买东西，买西瓜，有时候买得多了，您便不愿意让我一个人全提着，硬是要我让您也提一部分。在其他问题上我当然会听您的，可是唯独在这个问题上是绝对不行的。我执意不让，您便只好作罢。离开了您这么久，难得有机会孝敬您老人家，这点小事，就请让我来做吧。 您虽然年纪大了，身子骨却依旧显得非常硬朗。您走在路上，腰板挺得直直的，甚至比我这个年轻人走起路来还要直。而我这个驼背的毛病，也是您经常提醒我的地方。老家所处的那所楼房外有一条狭窄的街道，叫做西线街。在街上走大概7、8分钟之后，有一个推销按摩椅的地方，里面为老人提供免费试坐的机会。每天下午3：30，您便会和我姥姥一起去那里，您将其称作“去做椅子”。姥姥有时候会跟我说去坐那个椅子的事，虽说没有什么太大的功效，但也的确有点用。原来她抬不起左胳膊，一抬就疼，现在抬起来就一点也不疼了。偶尔您会反驳我姥姥的话，说那东西坐了那么久也没见有什么用，而且还卖的那么的贵，如果不提供免费试坐的机会根本就不会有人去理睬那些做推销的人。这个观点我完全赞同，看来您很深谙这些商家的把戏和惯用招数呢。 您还是一位非常懂得勤俭节约的人，有时候节约到让人感到心疼。有一次您要去下元（公共汽车总站，离老家很远）办点事，结果去了很久都没有回来，我们都在奇怪到底出了什么事，结果直到中午您才回来。一问才知道原来您是走路过去的。姥爷，您知道吗？从老家走到线材厂坐公车就需要20多分钟，然后还得坐公车坐上好几站。这一去一回就算是我们这些年轻人都会感到有些吃不消，更何况是像您这样的已经70多岁的老人？可是您却说干嘛要坐车啊？就这几步路走着就过去了，还能剩下2块钱的车钱。我听后倍感心疼，不过也对您的身体状况更加有了信心。谁想…… 姥爷，您是穷人出身，没上几年学便很快地因家里没钱而放弃学业，在一个工厂里面干活。您当了一辈子的工人，年轻时挣得那点微薄的工资维持着一大家子的生计。现在您老了，您比谁都有权利去花钱，去享受您应该享受的清福。您实在是没有必要为了这点钱而走那么老远，流出那么多的汗。您的这些子女们虽然不算富裕，可是这点小钱还是出得起的，您何必这样子节省下那点零碎的小钱？我好希望自己快快长大，好带您好好地出去逛逛，看看这个日新月异的世界，让您见证这么多年来在中国所发生的巨大的变化。艰难困苦的日子已经过去，现在再也不用像当年那样省吃俭用了，您应该考虑的，是如何让自己过的更好一点，从而让您能够多活几十年，活到一百岁。 姥爷，我好恨，好恨我现在没有本事，无法让您过上更好的生活，反而还需要您的资助。当您知道我考上了大学的时候，您居然拿出了2000千元钱作为我考上大学的奖励。面对这么多的钱，我没有半点喜悦的心情。姥爷，您这是何必？我考上大学不是理应必须要做到的事情吗？有什么理由需要您用这么多的钱来奖励我？这些钱您留着给自己用不好吗？您辛苦工作，勤俭节约了大半辈子，好不容易留下了点积蓄，就是全拿去享福也远远不够啊，怎么可以给我？我何德何能，有权利有资格收下您这份厚重的心意？也许您还不了解，现在考大学不像当初您的子女那样那么的不容易了，但无论怎样，无论现在处在一个什么样的时代，我考上大学，都是必须要做到的。因为，我想要成为您的骄傲！我想要报答您对我这么多年来的养育之恩！ 后来，您还担心我在老家钱不够花，从抽屉里拿出一个小包，将里面的200元钱交给了我。那个时候，我真的好难受。母亲在回深圳之前已经给了我足够的钱用，那还需要您再给我这些钱？想拒绝，您却执意要我拿着。看着这两张100元的纸币，我的心中有着说不出的苦涩。在这两张纸里面，究竟凝聚着多少您的心血呢？这200元钱，我一直小心留着，因为这是您给我的钱，因为这钱来之不易。将来，等我有本事了，我会加倍的还给您。这是我当时下的决心。可是，我再也没有机会了，您已经走了，离开了我，我再也见不到您了…… 直到现在，我依然难以相信，难以相信这个事实。因为当初，我走的时候，您看上去依旧是那么的健康。陪我打牌，陪我喝最后一次酒，陪我吃最后一次饺子。您甚至还帮我收拾行李，临走前反复叮嘱我有没有忘记什么东西。和您在一起度过的这20多天，是我最幸福的日子，甚至比当年跟您一起生活的那几年还要幸福。因为当年我太不懂事，而现在我成熟了不少，终于知道要孝敬您老人家了。您送给了我一双袜子，一件短袖上衣。虽然那是一件标准的老式上衣，穿在身上显得非常的不搭，但是我如获至宝。直至回到深圳，回到家中，我依然穿着这件您送给我的衣服。它会陪着我，一直陪着我。因为穿上了它，就好像您依然在我的身边一样。 姥爷，我很尊敬您。所以当我的小表弟们不听你的话，瞎闹腾让您不能静下心来看书的时候，我会那么的生气。 姥爷，我好爱您。所以当我看到您那么的勤俭节约，看到您送给我的那么多的钱，看到您那双因病变形的手时，我会那么的心疼，那么的难过。 姥爷，我好眷恋您。所以当我得知您去世的噩耗的时候，我是那么的不愿意相信这是真的，我是那么的悲伤。 母亲曾经对我说：“你跟你姥爷一样。”我当然知道她说这话是什么意思，她是指我太老气横秋，不爱出门，就爱闷在家里，没有朝气和活力。可是我听了之后，依然很高兴。因为我和您一样，因为我不愧和您在一起读过了那么长的时间，因为我不愧是您最关心，最在乎的外甥。 姥爷，您走的太早了！您还没有享受过真正的清福，还有很多地方您没有去过，您还没有再来深圳住上几个月！ 姥爷，您走的太早了！您还没有看到我哥结婚，您还没有看到我将来有本事的那一天！ 姥爷，您走的太早了！您的孙子还那么小，您还不知道他将来会不会有出息！ 从您离开我的那一刻起，我知道，我的世界里，一个我极其珍视的部分，没有了。我的世界早已不再完整，您的离去，更加让我悲痛欲绝。我不知道，我还能承受多少亲人离去的打击…… 姥爷，我好想您…… 姥爷，愿您能再另一个世界里平安、幸福…… 姥爷，我不需要您的保佑，我会让您看到的，将来真正有出息的那一天！ 最最敬爱您的外甥：吕亚东 2010年8月23日凌晨","link":"/2022/04/02/mian-huai-laoye/"},{"title":"《Python核心編程》筆記（三）","text":"今次的內容主要為format方法、函數、魔法參數、偏函數應用、面向對象編程、迭代器、新式類的高級特性和compile()等。原本預定要將生成器(yield)這部分的內容一併寫入，不過因為這部分內容難度較大，我覺得可能單獨寫成一篇文章比較好。另外，在今次的博文中，面向對象編程中的關於python的多重繼承機制，以及用戶如何自定義迭代器這兩個部分我會重點談一下。 今次博文寫完之後，基本上我的關於《Python核心編程》的筆記就到此結束了，之後關於python的技術心得文章應該會以專題的形式來進行撰寫，即一篇博文重點談一個問題，這樣檢索起來也比較方便。當然了，如果日後再遇到一些值得記錄下來的比較雜亂的小知識，我也會酌情考慮是否要將其作為《Python核心編程》筆記（四）來進行撰寫，畢竟python一些比較細節的語言特性還是值得我們注意的。 注：本書為第二版，其中python的代碼主要為2.x版本，使用python3.x的朋友請留意。 format方法format方法主要用於構造字符串，個人認為這個方法在需要格式化輸出一些信息的時候用的比較多。這部分內容並不難理解，直接上代碼即可明白。 代碼示例： 1234age = 25name = 'Swaroop'print('{0} is {1} years old'.format(name,age))print('Why is {0} playing with that python?'.format(name)) 輸出： 12Swaroop is 25 years oldWhy is Swaroop playing with that python? 你可以注意到變量值到字符串的轉變是由format方法自動完成的，這就方便了我們輸出字符串而不用去糾結那些%s,%d之類的東西。大括號中的數字表示format方法中的參數的位置，0表示第一個參數，1表示第二個參數，以此類推，然後你在前面的字符串中指定是要輸出哪個變量的值即可。當然了，你也可以將大括號中的數字省略，這樣就意味著format會按照其參數的順序來為字符串中的大括號進行依次賦值的工作。 format方法的威力還不只如此，請閱讀下面的例子： 代碼示例： 123456&gt;&gt;&gt; '{0:.9}'.format(1/3)0.333333333&gt;&gt;&gt; '{0:_^11}'.format('hello')'___hello___' #用下劃線將字符串'hello'填充至11個字符。&gt;&gt;&gt; '{name} wrote {book}'.format(name='Swaroop', book='A Byte of Python')'Swaroop wrote A Byte of Python' 函數python的函數”看上去”可以返回多個對象，如： 代碼示例： 12def bar(): return 'abc', [42,'python'], &quot;Guido&quot; 這麼寫是合法的，不過事實上它返回的是一個元組，而並不是真正的多個對象。這裡只是省去了小括號而已。 函數屬性 函數是可以擁有屬性的： 代碼示例： 1234def bar(): passbar.__doc__ == 'fuck'bar.version = 0.1 不過我們不能在函數定義的內部訪問這些屬性，因為在函數中沒有self這種東西，所以不能訪問的原因是因為函數體尚未創建。 魔法參數這個特性是我目前最喜歡的一個python的語言特性，非常優雅，非常美妙，令人愛不釋手。這個特性主要用於需要定義能夠獲取任意數量個參數的函數的場合。舉例如下： 代碼示例： 123456789def total(initial=5, *numbers, **keywords): count = initial for number in numbers: count += number for key in keywords: count += keywords[key] return count print(total(10, 1, 2, 3, vegetables=50, fruits=100)) 輸出的結果為166，不過166是怎麼計算出來的呢？請聽我娓娓道來： 當我們定義了一個帶一個星號的參數的時候，比如說這裡的numbers，就表示從該參數所在的位置開始到最後所有的除去關鍵字參數以外的參數會全部被收集到一個叫做numbers的列表中。在本例中，initial的值由默認的5變為了10，然後這之後的1，2，3全部被放進了名為numbers的列表中。同樣，當我們定義了一個帶兩個星號的參數的時候，比如說這裡的keywords，則表示從該參數所在的位置開始到最後的所有的關鍵字參數都會被收集到名為keywords的字典中。那麼在本例中，vegetables=50, fruits=100就被放進了這個字典中，其中vegetables和fruits為該字典中的兩個鍵，50和100為分別為它們的值。 需要特別注意的是，有默認值的參數必須處在沒有默認值參數的後面，否則解釋器會報錯。 代碼示例： 123456789&gt;&gt;&gt; def func(b=5,a):... pass... File &quot;&lt;stdin&gt;&quot;, line 1SyntaxError: non-default argument follows default argument&gt;&gt;&gt; def func(a,b=5):... pass...&gt;&gt;&gt; Keyword-only 參數 Keyword-only參數在我的理解中就是你在調用函數的時候，必須實名給出其值的參數。舉例如下： 代碼示例： 12345678910def total(initial=5, *numbers, vegetables): count = initial for number in numbers: count += number count += vegetables return countprint(total(10, 1, 2, 3, vegetables=50))print(total(10, 1, 2, 3,))# Raises error because we have not supplied a default argument value for 'vegetables' 輸出： 123456$ python keyword_only.py66Traceback (most recent call last):File &quot;test.py&quot;, line 12, in &lt;module&gt;print(total(10, 1, 2, 3))TypeError: total() needs keyword-only argument vegetables 在帶星號的參數後面聲明參數，解釋器會認為其為Keyword-only參數。那麼如果該參數沒有默認值，而且你在調用的時候也沒有給他賦值，那麼解釋器就會報錯。如果你想使用Keyword-only參數，但又不需要帶有星號的參數，可以簡單地用一個星號來代替帶星號的參數，如： 12def total(initial=5, *, vegetables): pass 需要特別注意的是，哪怕你在調用的時候，參數的數目已經與函數的定義的參數數目相同，如果你沒有指明Keyword-only參數和其值，那麼一樣會報錯，也就是說：以上面那個函數為例，其參數數目為兩個，如果你這樣調用total(1,2)還是會報錯，解釋器會提醒你你給多了參數，而不會將這個2認為是Keyword-only參數的值。 調用帶有可變長參數對象的函數 這同樣是一個需要留意的特性，請注意如下代碼： 代碼示例： 12345aTuple = (6,7,8)aDict = {'z':9}def newfoo(arg1, arg2, *nkw, **kw): pass #這裡略去不寫，該函數的功能就是簡單地將參數值按照不同類別來分別輸出。newfoo(1, 2, 3, x = 4, y = 5, *aTuple, **aDict) 我們按照上述方法來調用該函數，其結果為：arg1 = 1，arg2 = 2，nkw列表中的值分別為：3，6，7，8，而kw字典中的鍵值對分別為：{‘z’:9, ‘x’:4, ‘y’:5}（這裡我感覺不需要在意列表和字典中數據存放的次序） 偏函數應用(Partial Function Application PFA)這裡所指的是一類比較特殊的函數，即它們可以將帶有任意數量參數的函數轉化成另一些帶有剩餘參數的函數對象。某種意義上這和使用默認參數的情形相同，但在PFA的例子中，參數不需要調用函數默認值，而只需要明確要調用的集合。這樣一來對於一個函數來說，你可以擁有針對它的諸多偏函數調用，每個都能用不同的參數傳遞給原函數，然後進行調用。 代碼示例： 12345678910111213&gt;&gt;&gt; from operator import add, mul&gt;&gt;&gt; from functools import partial&gt;&gt;&gt; add1 = partial(add, 1) # add1(x) == add(1, x)&gt;&gt;&gt; mul100 = partial(mul, 100) # mul100(x) == mul(100, x)&gt;&gt;&gt;&gt;&gt;&gt; add1(10)11&gt;&gt;&gt; add1(1)2&gt;&gt;&gt; mul100(10)1000&gt;&gt;&gt; mul100(500)50000 add1函數的功能是對傳進來的參數的值執行加一操作，然後返回；mul100則是對其進行乘以100的操作，然後返回。你可以看到我們並不需要去實現這兩個函數，我們調用的是已經存在的函數，然而我們卻可以做到調用簡化，這就是PFA的威力。這種威力在我們需要調用那些帶有許多參數的函數的時候體現得最為明顯。這裡再舉一例： 代碼示例： 1234&gt;&gt;&gt; baseTwo = partial(int, base=2)&gt;&gt;&gt; baseTwo.__doc__ = 'Convert base 2 string to an int.'&gt;&gt;&gt; baseTwo('10010')18 以後我們想把二進制字符串轉換為十進制數字的時候，就可以簡單調用baseTwo函數了，而不需要每次都很繁瑣地調用int(‘10010’, 2)。不過你需要注意，如果你創建了不帶關鍵字參數的函數，比如baseTwo = partial(int, 2)，這可能會讓參數以錯誤的順序傳入int()，因為固定參數總是放在運行時刻參數的左邊，即baseTwo == int(2, x)，這時便會出現異常。 一個有趣的特性代碼示例： 12fuck = {'a':1, 'b':2}['a']print(fuck) #輸出為1 123456def a(fuck): def b():print('b') def c():print('c') suck = {'funcb':b, 'funcc':c}[fuck] suck()a('funcb') #輸出b 面向對象編程面向對象編程大家應該都已經比較熟悉了，我這裡就著重只談一些我認為比較重要的地方。 如果需要，每個子類最好定義它自己的構造器，不然基類的構造器會被調用。然而若子類重寫了基類的構造器，則基類的構造器將不會被自動調用，而需要你手動去調用。 解構器–del–只有在當前類實例的所有引用都被清除掉之後才會被調用。注意：重寫–del–之前要記得調用父類的–del–，另外，調用del x不表示調用了x.–del–，而只是減少了x的引用計數。 要想更新類屬性，只能通過類名來訪問該屬性。若通過實例來訪問，會相當於創建了一個該實例的屬性，而不是修改類屬性。當然了，這裡針對的是那些不可變的類屬性，若為可變類屬性，則通過實例來訪問的話，會直接修改該類屬性。 若想在子類中調用父類的方法，推薦採用super方法。 代碼示例： 123456789class P: def foo(self): print('Hi,I'm P-foo())class C(P): def foo(self): super(C,self).foo() print('Hi,I'm C-foo()) c = C()c.foo() 輸出： 12Hi,I'm P-foo()Hi,I'm C-foo() 關於super()，其實這一塊的水挺深的，我這裡只是簡單地做一個介紹，詳細地可以看這裡：關於python中的super()用法研究 多重繼承 說道多重繼承，一個顯而易見的問題就是當子類調用其父類中的某個方法的時候，（假設其父類都有該方法）python解釋器是按照何種方式在繼承樹上進行遍歷的。在python2.x的版本中，類分為經典類（不繼承自object）和新式類（繼承自object）。不過在python3.x中，這兩者已經沒有區別，都是新式類。按照《核心編程》中的說法，經典類是採用深搜的方法來遍歷繼承樹的，而新式類則是採用廣搜的方法。這裡我們只舉新式類的例子： 代碼示例： 12345678910111213141516171819class P1: #(object): # 父类1 def foo(self): print 'called P1-foo()'class P2: #(object): # 父类2 def foo(self): print 'called P2-foo()' def bar(self): print 'called P2-bar()'class C1(P1, P2): #子类1，从P1，P2 派生 passclass C2(P1, P2): #子类2，从P1，P2 派生 def bar(self): print 'called C2-bar()'class GC(C1, C2): #定义子孙类 pass #从C1，C2 派生 繼承樹示意圖如下： 然後我們來執行如下代碼： 12345&gt;&gt;&gt; gc = GC()&gt;&gt;&gt; gc.foo() # GC ==&gt; C1 ==&gt; C2 ==&gt; P1called P1-foo()&gt;&gt;&gt; gc.bar() # GC ==&gt; C1 ==&gt; C2called C2-bar() 我們可以清楚地看到，這裡採用的搜索算法為廣搜算法，即優先搜索在繼承樹中離自己最近的父類。 迭代器什麼叫迭代器？我們定義了一個–iter–()方法的類就被叫做迭代器，這意味著我們可以自己創建自己的迭代器。我們先來看一個簡單的代碼： 代碼示例： (randSeq.py) 1234567891011from random import choiceclass RandSeq(object): def __init__(self, seq): self.data = seq def __iter__(self): return self def __next__(self): return choice(self.data) 123456789101112&gt;&gt;&gt; from randseq import RandSeq&gt;&gt;&gt; for eachItem in RandSeq(... ('rock', 'paper', 'scissors')):... print (eachItem)...scissorsscissorsrockpaperpaperscissors: 這裡我們創建了一個隨機序列迭代器，它接受一個序列，然後隨機地返回其中的元素，需要注意的是這是一個無窮迭代，因為我們無損地讀取了一個序列，所以它是不會越界的。我們可以看到–iter–()僅返回self，這就是如何將一個對象聲明為迭代器的方式，最後，調用–next–方法來得到迭代器中連續的值。 我們在來看一個例子： 代碼示例： 123456789101112131415class MyIterator(object): def __init__(self,step): self.step=step def __next__(self): if self.step==0: raise StopIteration self.step-=1 return self.step def __iter__(self): return self for i in MyIterator(6): print(i) 輸出： 123456789&gt;&gt;&gt; ================================ RESTART ================================&gt;&gt;&gt; 543210&gt;&gt;&gt; 令這個迭代停止下來的方法就是捕獲StopIteration異常。 新式類的高級屬性簡單的模塊級私有化只需要在屬性或函數名前加一個單下劃線字符即可，這樣就可以防止它們被from mymodule import *這樣的語句加載。 –slots–是一個類變量，由一序列型對象組成，由所有合法標識構成的實例屬性的集合來表示。它可以是一個列表、元組或可迭代對象，也可以是標識實例能擁有的唯一的屬性的簡單字符串。任何試圖創建一個其名不在–slots–中的名字的實例屬性都將導致AttributeError異常。 代碼示例： 12345678class SlottedClass(object): __slots__ = ('foo', 'bar')&gt;&gt;&gt; c = SlottedClass()&gt;&gt;&gt;&gt;&gt;&gt; c.foo = 42&gt;&gt;&gt; c.xxx = &quot;don't think so&quot; Traceback (most recent call last):File &quot;&lt;stdin&gt;&quot;, line 1, in ?AttributeError: 'SlottedClass' object has no attribute 'xxx' 這種特性的主要目的是節約內存。其副作用是某種類型的”安全”,它能防止用戶隨心所欲地動態增加實例屬性。帶__slots__屬性的類定義不會存在__dict__了（除非你在__slots__中增加’dict‘元素）。 python給類提供了名為–call–的特殊方法，該方法允許程序員創建可調用的對象（實例）。 代碼示例： 12345class C(object): def __call__(self,*args): print('args:\\n',args)c = C()c(3) #輸出(3, ) callable()為一個布爾函數，用於判斷一個對象是否是可調用的。可調用返回True，否則返回False。 compile()compile()允許程序員在運行時刻迅速生成代碼對象，然後就可以用exec()或者內建函數eval()來執行這些對象或者對它們進行求值了。一個很重要的地方是：exec()和eval()都可以執行字符串格式的python代碼。但是exec()更加強大并更具有技巧性。eval()函數只能執行單獨一條表達式，但是exec()能够執行多條語句，導入(import)，函數聲明，甚至整個Python程序的字符串表示也可以。 compile函數的三個參數都是必需的，第一個參數代表要編譯的python代碼（字符串），第二個參數代表存放代碼對象的文件的名字（字符串）。雖為必需，但通常被置為空字符串。第三個參數也是一個字符串，用來表明代碼對象的類型，它有以下三種可能取值： ‘eval’ 可求值表達式，和eval()一起使用 ‘single’ 單一可執行語句，和exec()一起使用 ‘exec’ 可執行語句組，和exec()一起使用 下面分別給出這三種情況的例子： 可求值表達式 123&gt;&gt;&gt; eval_code = compile('100 + 200', '', 'eval')&gt;&gt;&gt; eval(eval_code)300 單一可執行語句 123&gt;&gt;&gt; single_code = compile('print(&quot;hello world!&quot;)', '', 'single')&gt;&gt;&gt; exec(single_code)hello world! 可執行語句組 1234567891011&gt;&gt;&gt; exec_code = compile(&quot;&quot;&quot;req = int(input('Count how many numbers?'))for eachNum in range(req): print(eachNum)&quot;&quot;&quot;, '', 'exec')&gt;&gt;&gt; exec(exec_code)Count how many numbers?6012345 需要注意的小知識在python3中，對於input()，用戶輸入什麼它就返回什麼，即只是簡單地將其作為字符串返回；而對於eval(input())，則會將用戶輸入的東西作為表達式進行求值，然後返回其結果。 代碼示例： 12345678&gt;&gt;&gt; a = eval(input())1+2&gt;&gt;&gt; print(a)3&gt;&gt;&gt; a = input()1+2&gt;&gt;&gt; print(a)1+2","link":"/2014/03/21/python-course-3/"},{"title":"《Python核心編程》筆記（二）","text":"今次的內容主要為字典、集合、迭代器、列表解析、生成器表達式和檢測與處理異常這幾部分內容，中間抑或摻加一些文件方面的內容。 注：本書為第二版，其中python的代碼主要為2.x版本，使用python3.x的朋友請留意。 字典另類創建字典之方法 代碼示例： 123456fdict = dict((['x',1],['y',2]))#fdict =&gt; {'y':2, 'x':1}ddict = {}.fromkeys(('x','y'),-1)#ddict =&gt; {'y':-1, 'x':-1}edict = {}.fromkeys(('foo','bar'))#edict =&gt; {'foo':None, 'bar':None} 另類字典遍歷之方法 代碼示例： 1234dict2['name'] = 'venus'dict2['port'] = 80print('host %(name)s is running on port %(port)d' % dict2)#輸出：host venus is running on port 80 刪除字典元素和字典 代碼示例： 1234del dict2['name'] #刪除鍵為'name'的條目dict2.clear() #刪除dict2中所有的條目del dict2 #刪除整個dict2字典dict2.pop('name') #刪除並返回鍵為'name'的條目 字典比較之方法 簡單來說字典的比較算法會按照如下的順序進行： 比較字典長度，長者為大 比較字典的鍵，鍵比較的順序與keys()方法返回鍵的順序相同 比較字典中相同鍵的值 下面這個原理圖解釋了這一算法： 字典的工廠函數dict() 代碼示例： 123456&gt;&gt;&gt; dict(zip(('x', 'y'),(1, 2))){'y':2, 'x':1}&gt;&gt;&gt; dict([['x', 1],['y', 2]]){'y':2, 'x':1}&gt;&gt;&gt; dict([('xy'[i-1], i)for i in range(1, 3)]){'y':2, 'x':1} 如果輸入的參數是另一個映射對象，比如一個字典對象，對其調用dict()會從存在的字典裡複製內容來生成新的字典。新生成的字典是原來字典對象的淺複製版本，它與用字典的內建方法copy()生成的字典對象是一樣的，不過其速度比copy方法要慢。 代碼示例： 1234567891011&gt;&gt;&gt; dict(x=1, y=2){'y':2, 'x':1}&gt;&gt;&gt; dict8 = dict(x=1, y=2)&gt;&gt;&gt; dict8{'y':2, 'x':1}&gt;&gt;&gt; dict9 = dict(**dict8) #非最好的方法&gt;&gt;&gt; dict9{'y':2, 'x':1}&gt;&gt;&gt; dict9 = dict8.copy()&gt;&gt;&gt; dict9{'y':2, 'x':1} keys方法可以返回字典所有的鍵，但是是沒有順序的，如果我們希望對其進行排序，可以這麼做： 代碼示例： 1234&gt;&gt;&gt; for eachKey in sorted(dict2):... print('dict2 key', eachKey, 'has value', dict2[eachKey])dict2 key name has value earthdict2 key port has value 80 update()可以用來將一個字典的內容添加到另外一個字典中。字典中原有的鍵如果與新添加的鍵重複，那麼重複鍵所對應的原有條目的值將被新鍵所對應的值所覆蓋。 所有不可變的類型都是可哈希的，因此它們都可以作為字典的鍵。注：值相同的數字表示相同的鍵，即1和1.0的哈希值是相同的。另外，若元組中包含列表，則該元組不可作為字典的鍵。 集合集合創建 代碼示例： 1234&gt;&gt;&gt; s = set('cheeseshop')&gt;&gt;&gt; sset(['c','h','e','o','p','s']) #此為可變集合#若將上述代碼中的set換為frozenset,則為不可變集合 集合更新 s.add(‘z’), s.update(‘pypi’), s.remove(‘z’), s -= set(‘pypi’) 集合支持比較大小的運算，其含義與子集、超集之概念相同。 集合運算 聯合(並集) s | t 交集 s &amp; t 差集 s - t 異或 s ^ t 注：若左右操作數類型不同(即一個是可變集合而另一個是不可變集合)，則所產生的結果類型與左操作數的類型相同，另外，加號不是集合類型的操作符。 另外，只適合於可變集合的運算符還有：|=, &amp;=, -=, ^= ##怎麼在python中實現switch語句 python中並沒有switch–case語句，但這並不表示我們需要寫大量的elif語句，事實上，我們可以這樣： 代碼示例： 1234if user.cmd in ('create', 'delete', 'update'): action = '%s item' % user.cmdelse: action = 'invalid choice...try again!' 12345msgs = {'create': 'create item', 'delete': 'delete item', 'update': 'update item'}default = 'invalid choice...try again!'action = msgs.get(user.cmd, default) 使用字典的一大好處是它的搜索操作比類似if-elif-else語句或是for循環這樣的序列查詢速度要快得多。 三元操作符 X if C else Y 代碼示例： 1234&gt;&gt;&gt; x, y = 4, 3&gt;&gt;&gt; smaller = x if x &lt; y else y&gt;&gt;&gt; smaller3 迭代器 迭代器的限制： 迭代器不能向後移動，不能回到開始，不能複制一個迭代器而只能新建另一個。 代碼示例： 12345678910&gt;&gt;&gt; myTuple = (123,'xyz',45.67)&gt;&gt;&gt; i = iter(myTuple)&gt;&gt;&gt; i.next()123&gt;&gt;&gt; i.next()'xyz'&gt;&gt;&gt; i.next()45.67&gt;&gt;&gt; i.next()#出錯！ 注：在迭代可改變對象的時候修改它們並不是個好主意，因為一個序列的迭代器只是記錄你當前到達第幾個元素，所以如果你在迭代的時候改變了元素，更新會立刻反映到你所迭代的條目上。 列表解析 語法： [expr for iter_var in iterable if cond_expr]注：列表解析支持多重for循環（為嵌套關係）和多個if語句（為並列關係） 代碼示例： 12[x ** 2 for x in range(6)] #這種方式比下面的通過map方法構建的方式效率高map(lambda x: x ** 2,range(6)) 迭代矩陣（3×5）: [(x + 1, y + 1) for x in range(3) for y in range(5)] 生成器表達式 語法：（與列表解析語法非常相似） (expr for iter_var in iterable if cond_expr) 與列表解析不同，生成器表達式並不創建列表，而是返回一個生成器。這個生成器在每次計算出一個條目之後，會把這個條目“生產”出來，這種做法節約了內存。 文件和輸入輸出輸入輸出方法 注：當使用輸入方法如read()或readlines()時，python並不會刪除行結束符，這個操作被留給了程序員，所以如下的代碼經常會出現： 123f = open('myFile','r')data = [line.strip() for line in f.readlines()]f.close() 注：write()和writelines()也不會自動添加行結束符。 truncate()接受一個可選的size作為參數，若指定則文件將被截取到最多size個字節處；若沒有傳遞，則默認截取到文件指針所指向的當前位置。例如：你打開一個文件之後立刻調用該方法，則你打開的這個文件會被刪除。 seek()接受一個叫做offset的參數，該函數可移動文件指針到不同的位置。offset若為0，則表示移動文件指針到文件開頭，為1則表示從當前位置開始算起，為2時則會移動到文件末尾。tell()可告訴你當前文件指針的位置。 sys.argv為命令行參數的列表，其長度len(sys.argv)為參數個數。 注：若要查詢os模塊對文件、目錄的操作方法，可查閱本書9.7節。 檢測和處理異常異常可以通過try語句來檢測，try語句主要有兩種形式：try-except和try-finally。這兩個語句是互斥的，即你只能使用其中一種。一個try語句可對應多個except語句，但只能對應一個finally語句，或是一個try-except-finally複合語句。你可以使用try-except語句檢測和處理異常，你也可以添加一個可選的else語句處理沒有檢測到異常時執行的代碼，而try-finally只允許檢測異常並做一些必要的清除工作（無論發生錯誤與否），沒有任何異常處理設施。然而複合語句可以做到以上兩者。 try語句塊中異常發生點之後的剩餘語句將永遠不會被執行，一旦一個異常被引發，解釋器將搜索處理器。一旦找到，就開始執行處理器中的代碼，若沒有找到，則向上移交給調用者處理，若始終找不到，python解釋器會顯示出跟踪記錄。 我們還可以在一個except語句中處理多個異常，except語句在處理多個異常時要求異常被放到一個元組中。 12except(exc1[, exc2[, ...excn]])[as reason]: suite_for_exception_exc1_to_excn 異常參數 異常可以擁有參數，異常引發之後它會被傳遞給異常處理器，該參數是作為附加信息傳遞給處理器的，代碼示例如下： 1except exception as e: #e即為異常參數 e為一個包含來自導致異常的代碼的診斷信息的類實例，異常參數自身會組成一個元組，並存儲為類實例（異常類的實例）的屬性。你可以通過print函數來打印e中所包含的信息，你還可以通過str函數來獲得一個比較友好的字符串表示。 異常語句中else的含義 在else範圍中的任何語句被執行之前，try範圍中的所有代碼必須完全執行成功，即運行結束之前沒有引發任何異常。而finally範圍中的代碼則是無論異常是否發生，是否捕捉成功都會被執行。 完成的檢測與處理異常的代碼結構 12345678try: Aexcept MyException: #可有多個 Belse: #可選 Cfinally: #可選 D 注：無異常時執行ACD，有異常時執行ABD。 try-finally try與finally單獨成對使用時，try內產生一個異常之後，會立即跳轉到finally語句段。finally執行完畢之後，會繼續向上一層引發異常。注：若finally中的代碼引發了另一個異常或由於return，break，continue語法而終止，原來的異常將丟失且無法重新引發。 with語句 注：這一塊的內容不是很懂，這裡只舉簡單一例。 123with open('myFile','r') as f: for eachLine in f: ... 異常和sys模塊 另一種獲取異常信息的途徑是通過sys模塊中的exc_info()函數，此功能提供一個三元組的信息，多於我們單純用異常參數所能獲得的信息。 代碼示例： 12345678try: float('abc123')except: import sys exc_tuple = sys.exc_info()for item in exc_tuple: print(item) 我們能從sys.exc_info()得到的元組中是： exc_type：異常類； exc_value：異常類的實例； exc_traceback：跟踪記錄對象","link":"/2014/03/15/python-course-2/"}],"tags":[{"name":"redis","slug":"redis","link":"/tags/redis/"},{"name":"缓存","slug":"缓存","link":"/tags/%E7%BC%93%E5%AD%98/"},{"name":"分布式","slug":"分布式","link":"/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"},{"name":"雜文","slug":"雜文","link":"/tags/%E9%9B%9C%E6%96%87/"},{"name":"搖滾","slug":"搖滾","link":"/tags/%E6%90%96%E6%BB%BE/"},{"name":"心得","slug":"心得","link":"/tags/%E5%BF%83%E5%BE%97/"},{"name":"動漫","slug":"動漫","link":"/tags/%E5%8B%95%E6%BC%AB/"},{"name":"知乎","slug":"知乎","link":"/tags/%E7%9F%A5%E4%B9%8E/"},{"name":"回答","slug":"回答","link":"/tags/%E5%9B%9E%E7%AD%94/"},{"name":"悼文","slug":"悼文","link":"/tags/%E6%82%BC%E6%96%87/"},{"name":"追忆","slug":"追忆","link":"/tags/%E8%BF%BD%E5%BF%86/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"教程","slug":"教程","link":"/tags/%E6%95%99%E7%A8%8B/"}],"categories":[{"name":"Redis","slug":"Redis","link":"/categories/Redis/"},{"name":"個人心得","slug":"個人心得","link":"/categories/%E5%80%8B%E4%BA%BA%E5%BF%83%E5%BE%97/"},{"name":"知乎","slug":"知乎","link":"/categories/%E7%9F%A5%E4%B9%8E/"},{"name":"悼文","slug":"悼文","link":"/categories/%E6%82%BC%E6%96%87/"},{"name":"Python","slug":"Python","link":"/categories/Python/"}]}